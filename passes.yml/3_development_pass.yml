metadata:
  name: Development Pass
  number: 3
  purpose: Step-by-step feature implementation with checkpoints and execution plans.
  role: '**Development Lead** - feature discovery, planning, implementation, checkpoint-based execution.'
  description: Converted from 3_development_pass.md
when_to_use:
  conditions:
  - "Implementation needed for documented features"
  - "Code changes required for new functionality"
  - "Development work planned in execution plans"
  - "Feature implementation gaps identified"
  - "Technical debt needs addressing"
  # Decision Tree Indicators
  indicators:
  - "implementation needed"
  - "code changes required"
  - "new features to build"
  - "execution plans ready"
  - "development backlog items"

  prerequisites: [ "documentation_pass" ]
  next_pass: "testing_pass"
process:
  workflow_pattern: "SCAN → DRAFT → ASK → SYNC → CONFIRM"
  phases:
    scan:
      purpose: "Detect implementation gaps and development opportunities"
      description: "Repository update, scan docs/, identify features/drift needing development"
      actions:
      - "update_repository_status"
      - "scan_documentation_for_features"
      - "identify_implementation_gaps"
      - "assess_development_priorities"
      - "run_drift_scanner"

    draft:
      purpose: "Create execution plans and development branches"
      description: "Feature selection (AUTO/PICKER mode), create EXEC-PLAN-{change-name}.md with documented steps, create exec-plan/{change-name} branch"
      actions:
      - "select_features_for_implementation"
      - "create_execution_plan_document"
      - "create_exec_plan_branch"
      - "document_implementation_steps"
      - "establish_checkpoints"
      - "validate_code_location_fields"

    ask:
      purpose: "Validate development approach and priorities"
      description: "Validate selection and execution plan, confirm approach/priorities"
      protocol:
      - "ask_one_question_at_a_time"
      - "wait_for_response"
      - "no_multiple_questions"
      questions:
      - "implementation_approach: [methodology/strategy]"
      - "feature_priorities: [high/medium/low]"
      - "technical_constraints: [limitations]"
      - "timeline_expectations: [estimated effort]"

    sync:
      purpose: "Execute implementation with checkpoint tracking"
      description: "Execute steps in loop on exec-plan branch, auto-commit steps/checkpoints, update progress"
      actions:
      - "execute_implementation_steps"
      - "auto_commit_checkpoints"
      - "update_progress_tracking"
      - "validate_step_completion"
      - "handle_implementation_issues"
      - "update_code_location_fields"

    merge:
      purpose: "Complete development cycle and integrate changes"
      description: "Complete execution, confirm merge to main branch, delete exec-plan branch"
      actions:
      - "validate_implementation_completion"
      - "run_final_quality_checks"
      - "merge_to_main_branch"
      - "cleanup_exec_plan_branch"
      - "update_documentation_status"

# Expected Outcomes
expected_outcomes:
- "Implemented features with working code"
- "Execution plan documentation in docs/runs/"
- "Checkpoint-based progress tracking"
- "Clean integration with main branch"
- "Updated feature implementation status"
- "Technical debt reduction"
- "Code quality improvements"

# Quality Gates
quality_gates:
  implementation_requirements:
  - name: "execution_plan_complete"
    validation: "EXEC-PLAN document exists with detailed steps"
    critical: true
  - name: "checkpoint_tracking"
    validation: "Implementation progress tracked with checkpoints"
    critical: true
  - name: "code_quality_standards"
    validation: "Implementation meets code quality standards"
    critical: true
  - name: "code_location_fields_updated"
    validation: "All implemented features have accurate Code Location fields"
    critical: true
    description: "Ensure Code Location fields point to actual implementation"

  integration_requirements:
  - name: "clean_merge"
    validation: "Changes merge cleanly to main branch"
    critical: true
  - name: "no_breaking_changes"
    validation: "Implementation doesn't break existing functionality"
    critical: true
  - name: "documentation_updated"
    validation: "Related documentation is updated"
    critical: true

# Code Location Field Requirements
code_location_requirements:
  purpose: "Ensure accurate Feature-Implementation linking for drift analysis"
  critical: true

  # Framework Classification for Testing Strategy
  framework_classification:
    code_framework:
      description: "Features with executable code requiring automated testing"
      code_location_patterns: [ ".py", ".js", ".ts", ".java", ".go", ".cpp", ".c" ]
      testing_approach: "Automated unit/integration tests"
      examples: [ "tools/drift_scanner.py", "vscode-ddd-navigator/src/extension.ts" ]
      validation: "Automated test execution with CI/CD integration"

    documentation_framework:
      description: "Features with documentation requiring manual validation"
      code_location_patterns: [ ".md", "docs/", "README" ]
      testing_approach: "Manual validation only - NO automated tests"
      examples: [ "docs/features/", "README.md", "AGENT-GUIDELINES.md" ]
      validation: "Manual review for accuracy, completeness, and consistency"

    configuration_framework:
      description: "Features with configuration requiring schema validation"
      code_location_patterns: [ ".yml", ".yaml", ".json", "config/" ]
      testing_approach: "Schema validation + manual review"
      examples: [ ".agent3d-config.yml", "passes.yml/", "templates/" ]
      validation: "Configuration validation and manual configuration review"

    non_testable:
      description: "Process/workflow features requiring manual validation only"
      code_location_patterns: [ "N/A", "process description" ]
      testing_approach: "Manual process validation only"
      examples: [ "N/A (Documentation framework quality process)" ]
      validation: "Manual verification of process adherence"

  # Testing Strategy Rules
  testing_strategy:
    automated_testing_required:
    - "ONLY Code Framework features (.py, .js, .ts, etc.)"
    - "Create pytest/jest/junit tests for executable code"
    - "Implement unit and integration tests"
    - "Include in CI/CD pipeline"

    manual_validation_required:
    - "Documentation Framework features (.md files)"
    - "Configuration Framework features (.yml/.json files)"
    - "Non-Testable features (N/A locations)"
    - "NO automated tests should be created for these"

    validation_approach:
    - "Documentation: Manual review for quality and accuracy"
    - "Configuration: Schema validation + manual verification"
    - "Process: Manual adherence verification"

  field_format:
    python_modules: "module.path[Class/Function]"
    file_paths: "path/to/file[Object]"
    simple_files: "path/to/script.py"
    documentation_only: "N/A"
    multiple_locations: "location1, location2, location3"

  validation_requirements:
    during_implementation:
    - "Add Code Location field to all new features"
    - "Update Code Location field when implementing existing features"
    - "Verify Code Location paths are accurate and resolvable"
    - "Use project Python path configuration for module resolution"

    before_merge:
    - "Run drift scanner in code-location mode to validate all paths"
    - "Ensure no 'file_not_found' or 'class_not_found' issues"
    - "Verify Code Location fields follow project conventions"
    - "Update any outdated Code Location references"

  examples_by_project_type:
    python_tools_structure:
    - "tools.drift_scanner[DriftScanner]"
    - "tools.migration_manager[MigrationManager.execute_migration]"
    - "workflows.validate_sync[WorkflowSyncValidator]"

    python_src_layout:
    - "src.main[Application]"
    - "src.models.user[UserModel]"
    - "src.services.auth[AuthenticationService.login]"

    mixed_structure:
    - "tools/drift_scanner_mcp_server.sh"
    - "src.core[CoreEngine]"
    - "scripts.deploy[deploy_application]"

    documentation_features:
    - "N/A" # For documentation-only features

  quality_gates:
  - "All implemented features have Code Location fields"
  - "Code Location paths are validated and resolvable"
  - "Code Location format follows project conventions"
  - "Drift scanner code-location mode passes without critical issues"

# Critical Notes
critical_notes:
- "ALWAYS create execution plan before implementation"
- "ALWAYS use YAML format for execution plans"
- "ALWAYS commit execution plan before starting implementation"
- "ALWAYS validate Code Location fields before marking complete"
- "ALWAYS run tests after implementation"
- "ALWAYS update DDD-STATUS after completion"
- "ALWAYS update versions when writing template or framework YAML files"
