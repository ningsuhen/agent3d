metadata:
  language: "markdown"
  purpose: "Documentation-focused development with LLM optimization"
  scope: "Documentation projects, technical writing, and LLM-consumed content"
  description: "Markdown development rules for DDD framework compliance"
  last_updated: "2025-01-27"

# Core Principles
core_principles:
  documentation_first_development:
  - "Markdown is the implementation, not just documentation"
  - "Structure and clarity are paramount"
  - "Consistency across all documentation files"
  - "LLM-optimized content for agent consumption"

  content_philosophy:
    assume_llm_competency: "Remove verbose explanations of standard tools and practices"
    command_centric: "Provide exact commands and syntax, minimal explanation"
    project_specific_focus: "Emphasize unique procedures and configurations"
    brevity_with_context: "Maintain necessary context without verbosity"

# Primary Validation Process
validation_process:
  priority_1_markdown_linting:
    tool: "markdownlint"
    execution: "Run before all other checks"
    requirement: "MUST pass all lint checks before proceeding"
    configuration:
      MD013:
        line_length: 120
        code_blocks: false
        tables: false
      MD033:
        allowed_elements: [ 'details', 'summary' ]
      MD041: false # Allow documents without top-level heading

  priority_2_secondary_validation:
  - "Link validation (after lint passes)"
  - "Spell checking (after lint passes)"
  - "Template compliance (after lint passes)"
  - "Mermaid diagram syntax validation (after lint passes)"

  priority_3_manual_review:
  - "Content accuracy verification"
  - "LLM optimization review"
  - "Cross-reference validation"
  - "Consistency checking"

# Development Process
process:
  workflow_pattern: "LINT → VALIDATE → OPTIMIZE → REVIEW"

  phases:
    lint:
      description: "Run markdownlint validation as primary check"
      tools: [ "markdownlint-cli" ]
      commands:
        install: "npm install -g markdownlint-cli"
        check: "markdownlint *.md"
        fix: "markdownlint --fix *.md"

    validate:
      description: "Secondary validation after lint passes"
      checks:
      - "link_validation"
      - "spell_checking"
      - "template_compliance"
      - "mermaid_diagram_syntax"

    optimize:
      description: "LLM optimization and content compression"
      techniques:
      - "remove_basic_explanations"
      - "focus_on_specifics"
      - "eliminate_redundancy"
      - "command_first_approach"

    review:
      description: "Manual review for accuracy and consistency"
      areas:
      - "content_accuracy"
      - "cross_reference_validation"
      - "consistency_checking"
      - "llm_readability"
standards:
  primary_validation:_markdown_linting_(priority_1):
    description: 'Primary Validation: Markdown Linting (PRIORITY 1)'
    content: '**Tool:** markdownlint (MD rules)

      **Execution:** Run before all other checks

      **Requirement:** MUST pass all lint checks before proceeding


      ### Critical Lint Rules (Must Pass)


      Use default markdownlint checks with custom configuration below.


      ### Lint Configuration


      ```yaml'
  lint_execution_commands:
    description: Lint Execution Commands
    content: '```bash'
  secondary_validation_(priority_2):
    description: Secondary Validation (PRIORITY 2)
    content: '- Link validation (after lint passes)

      - Spell checking (after lint passes)

      - Template compliance (after lint passes)

      - Mermaid diagram syntax validation (after lint passes)


      ### Manual Review (PRIORITY 3)


      - Content accuracy verification

      - LLM optimization review

      - Cross-reference validation

      - Consistency checking'
  core_principles:
    description: Core Principles
    content: '### Documentation-First Development


      - Markdown is the implementation, not just documentation

      - Structure and clarity are paramount

      - Consistency across all documentation files

      - LLM-optimized content for agent consumption


      ### Content Philosophy


      - **Assume LLM Competency:** Remove verbose explanations of standard tools and practices

      - **Command-Centric:** Provide exact commands and syntax, minimal explanation

      - **Project-Specific Focus:** Emphasize unique procedures and configurations

      - **Brevity with Context:** Maintain necessary context without verbosity'
  file_structure_standards:
    description: File Structure Standards
    content: "### Naming Conventions


      - Use kebab-case for file names: `user-guide.md`, `api-reference.md`

      - Use descriptive, specific names: `github-integration.md` not `integration.md`

      - Prefix numbered sequences: `1_foundation_pass.md`, `2_documentation_pass.md`

      - Use `.template.md` suffix for templates


      ### Directory Organization


      ```text

      docs/

      ├── README.md                    # Project overview

      ├── REQUIREMENTS.md              # Functional requirements

      ├── designs/                     # Component specifications

      ├── proposals/                   # Feature proposals

      └── guides/                      # User guides

      ```


      ### File Headers


      Every markdown file should start with:


      ```markdown"
  content_structure_rules:
    description: Content Structure Rules
    content: "### Heading Hierarchy


      - Use consistent heading levels: `#` → `##` → `###`

      - No skipping levels: Don't go from `#` to `###`

      - Use descriptive headings that work as standalone navigation

      - Maximum 4 heading levels for readability


      ### Lists and Organization


      - Use `-` for unordered lists (consistent bullet style)

      - Use `1.` for ordered lists (auto-numbering)

      - Nest lists with 2-space indentation

      - Use task lists `- [ ]` for actionable items


      ### Code Blocks and Commands


      - Always specify language for syntax highlighting: ````markdown` not````

      - Use `bash` for shell commands, not `sh` or `shell`

      - Include exact commands without verbose explanations

      - Use inline code for file names, variables, and short commands"
  llm_optimization_rules:
    description: LLM Optimization Rules
    content: '### Content Compression


      - **Remove Basic Explanations:** Assume knowledge of git, npm, standard tools

      - **Focus on Specifics:** Keep project-specific details and exact commands

      - **Eliminate Redundancy:** Don''t repeat information available elsewhere

      - **Command-First:** Lead with the command, minimal context


      ### Examples of Compression


      **Before (Verbose):**


      ```markdown

      To create a new branch, you need to use git checkout with the -b flag.

      This will create and switch to a new branch. Run the following command

      where feature-name should be descriptive of your changes:

      ```


      **After (LLM-Optimized):**


      ```markdown

      Create feature branch:

      ```bash

      git checkout -b feature-name

      ```


      ### Information Hierarchy


      1. **Essential Commands:** Always include exact syntax

      2. **Project Context:** Keep project-specific configurations

      3. **Critical Warnings:** Preserve important constraints

      4. **Standard Procedures:** Compress to command-only format'
  link_and_reference_standards:
    description: Link and Reference Standards
    content: '### Internal Links


      - Use relative paths: `[Guide](../guides/setup.md)` not absolute URLs

      - Link to specific sections: `[Setup Process](setup.md#installation)`

      - Verify all links during documentation passes

      - Use descriptive link text, not "click here"


      ### External Links


      - Use reference-style links for repeated URLs

      - Include link validation in testing

      - Prefer stable, official documentation links

      - Archive important external content when possible'
  template_integration:
    description: Template Integration
    content: '### Template Usage


      - All documents should derive from appropriate templates

      - Replace all `{{placeholders}}` with actual content

      - Remove `<template>` and `<example>` tags before finalizing

      - Follow template structure exactly for consistency


      ### Template Variables


      Common variables across markdown documents:


      - `{{project_name}}` - Project name

      - `{{document_title}}` - Document title

      - `{{creation_date}}` - Creation timestamp

      - `{{author}}` - Document author'
  quality_standards:
    description: Quality Standards
    content: '### Content Quality


      - **Clarity:** Every sentence should have clear purpose

      - **Accuracy:** All commands and procedures must be tested

      - **Completeness:** Cover all necessary information without excess

      - **Consistency:** Use same terminology and format throughout


      ### Technical Accuracy


      - Test all commands and procedures

      - Verify all links and references

      - Ensure code examples are functional

      - Validate against actual implementation


      ### LLM Readability


      - Use clear, unambiguous language

      - Structure information hierarchically

      - Provide context without verbosity

      - Focus on actionable information'
  documentation_types:
    description: Documentation Types
    content: '### Process Documentation


      - Focus on step-by-step procedures

      - Use numbered lists for sequential steps

      - Include verification steps

      - Compress standard tool usage


      ### Reference Documentation


      - Organize information for quick lookup

      - Use consistent formatting for similar items

      - Include examples for complex concepts

      - Minimize explanatory text


      ### Guide Documentation


      - Balance completeness with brevity

      - Assume reader competency with basics

      - Focus on project-specific procedures

      - Include troubleshooting for common issues'
  validation_rules:
    description: Validation Rules
    content: '### Primary Validation: Markdown Linting (PRIORITY 1)


      **Tool:** markdownlint (MD rules)

      **Execution:** Run before all other checks

      **Requirement:** MUST pass all lint checks before proceeding


      #### Critical Lint Rules (Must Pass)


      Use default markdownlint checks with custom configuration below.


      #### Lint Configuration


      ```yaml'
  markdown_rendering_validation:
    description: Markdown Rendering Validation
    content: "### Critical Rendering Issues (Must Fix)


      #### Mermaid Diagram Validation


      - [ ] **Syntax Correctness:** All mermaid diagrams use valid syntax

      - [ ] **Proper Fencing:** Mermaid blocks use ````mermaid` with language specification

      - [ ] **Node Naming:** Use consistent node naming (A, B, C... or descriptive names)

      - [ ] **Arrow Syntax:** Use correct arrow syntax (`-->`, `-.->`, `==>`)

      - [ ] **Diagram Types:** Verify diagram type matches content (graph, sequenceDiagram, etc.)


      #### Code Block Validation


      - [ ] **Language Specification:** All code blocks specify language (````bash`,````yaml`, etc.)

      - [ ] **Consistent Fencing:** Use triple backticks (````), not single or double

      - [ ] **Proper Indentation:** Code blocks maintain consistent indentation

      - [ ] **Syntax Highlighting:** Language tags enable proper syntax highlighting


      #### Link Validation


      - [ ] **Relative Path Accuracy:** Internal links use correct relative paths

      - [ ] **Anchor Link Format:** Section links use proper `#heading-format`

      - [ ] **External Link Validity:** All external URLs are accessible

      - [ ] **Reference Link Format:** Reference-style links properly formatted


      #### Table Validation


      - [ ] **Pipe Alignment:** Table pipes (`|`) properly aligned

      - [ ] **Header Separation:** Tables include header separator row

      - [ ] **Cell Content:** No empty cells without explicit spacing

      - [ ] **Consistent Columns:** All rows have same number of columns


      ### High Priority Rendering Issues


      #### Heading Structure


      - [ ] **Hierarchy Compliance:** No skipped heading levels (H1 → H2 → H3)

      - [ ] **Unique Anchors:** Heading text creates unique anchor links

      - [ ] **Navigation Clarity:** Headings work as standalone navigation

      - [ ] **Length Limits:** Headings under 60 characters for readability


      #### List Formatting


      - [ ] **Consistent Bullets:** Use `-` for unordered lists throughout

      - [ ] **Proper Nesting:** Nested lists use 2-space indentation

      - [ ] **Task List Format:** Checkboxes use `- [ ]` and `- [x]` format

      - [ ] **Mixed List Avoidance:** Don't mix ordered and unordered in same context


      #### Special Characters


      - [ ] **HTML Entity Usage:** Use HTML entities for special characters when needed

      - [ ] **Escape Characters:** Properly escape markdown special characters

      - [ ] **Unicode Handling:** Ensure unicode characters render correctly

      - [ ] **Emoji Consistency:** Use consistent emoji format (unicode vs shortcodes)


      ### Medium Priority Rendering Issues


      #### Emphasis and Formatting


      - [ ] **Bold/Italic Syntax:** Use `**bold**` and `*italic*` consistently

      - [ ] **Inline Code Format:** Use single backticks for inline code

      - [ ] **Strikethrough Format:** Use `~~text~~` for strikethrough

      - [ ] **Consistent Emphasis:** Apply emphasis consistently across documents


      #### Image and Media


      - [ ] **Alt Text Presence:** All images include descriptive alt text

      - [ ] **Path Accuracy:** Image paths are correct and accessible

      - [ ] **Size Considerations:** Images are appropriately sized for context

      - [ ] **Format Support:** Use widely supported image formats (PNG, JPG, SVG)


      #### Blockquotes and Callouts


      - [ ] **Quote Formatting:** Use `>` for blockquotes consistently

      - [ ] **Nested Quotes:** Properly format nested blockquotes

      - [ ] **Callout Syntax:** Use consistent callout formatting if supported

      - [ ] **Attribution Format:** Properly attribute quoted content


      ### Rendering Compatibility


      #### GitHub Flavored Markdown


      - [ ] **GFM Compliance:** Follow GitHub Flavored Markdown specifications

      - [ ] **Table Support:** Use GFM table syntax

      - [ ] **Task List Support:** Use GFM task list format

      - [ ] **Syntax Highlighting:** Use GFM supported language identifiers


      #### Cross-Platform Compatibility


      - [ ] **Standard Compliance:** Follow CommonMark specification

      - [ ] **Parser Compatibility:** Test with multiple markdown parsers

      - [ ] **Mobile Rendering:** Ensure content renders well on mobile devices

      - [ ] **Accessibility:** Follow accessibility guidelines for markdown content


      ### Mermaid Diagram Best Practices


      #### Diagram Syntax Rules


      ```markdown"
  graph_diagrams:
    description: Graph Diagrams
    content: "```mermaid

      graph TD

      \    A[Start] --> B{Decision}

      \    B -->|Yes| C[Action 1]

      \    B -->|No| D[Action 2]

      ```"
  sequence_diagrams:
    description: Sequence Diagrams
    content: "```mermaid

      sequenceDiagram

      \    participant A as Actor

      \    participant B as System

      \    A->>B: Request

      \    B-->>A: Response

      ```"
  flowcharts:
    description: Flowcharts
    content: "```mermaid

      flowchart LR

      \    A[Input] --> B[Process]

      \    B --> C[Output]

      ```


      ```markdown


      #### Common Mermaid Errors to Avoid

      - **Missing Language Tag:** Always use ````mermaid`

      - **Invalid Node Names:** Use alphanumeric characters for node IDs

      - **Incorrect Arrow Syntax:** Use `-->` for solid, `-.->` for dashed arrows

      - **Malformed Participant Names:** Use valid identifiers in sequence diagrams

      - **Syntax Mixing:** Don't mix different diagram syntaxes in one block"
  common_anti-patterns:
    description: Common Anti-Patterns
    content: '### Avoid These Patterns

      - **Over-explanation:** Don''t explain basic development concepts

      - **Redundant Information:** Don''t repeat content from other documents

      - **Verbose Commands:** Don''t include installation instructions for standard tools

      - **Inconsistent Structure:** Don''t deviate from established patterns

      - **Broken Links:** Don''t leave unvalidated references


      ### Preferred Alternatives

      - **Concise Commands:** Provide exact syntax with minimal context

      - **Cross-References:** Link to detailed information instead of repeating

      - **Assumed Knowledge:** Build on standard development knowledge

      - **Consistent Patterns:** Follow established documentation structure'
  rendering_validation_checklist:
    description: Rendering Validation Checklist
    content: '### Pre-Commit Validation

      Before committing any markdown changes, verify:


      - [ ] **Mermaid Diagrams Render:** All diagrams display correctly in GitHub preview

      - [ ] **Code Blocks Highlight:** All code blocks show proper syntax highlighting

      - [ ] **Links Function:** All internal and external links work correctly

      - [ ] **Tables Display:** All tables render with proper alignment

      - [ ] **Headings Navigate:** All headings create proper anchor links

      - [ ] **Lists Format:** All lists display with consistent formatting

      - [ ] **Images Load:** All images display with proper alt text

      - [ ] **Special Characters:** All special characters render correctly


      ### Cross-Platform Testing

      Test markdown rendering across:


      - [ ] **GitHub Web Interface:** Primary rendering target

      - [ ] **GitHub Mobile App:** Mobile compatibility

      - [ ] **VS Code Preview:** Development environment preview

      - [ ] **Common Markdown Parsers:** Pandoc, CommonMark, etc.


      ### Accessibility Validation

      Ensure markdown content is accessible:


      - [ ] **Alt Text Present:** All images have descriptive alt text

      - [ ] **Heading Structure:** Logical heading hierarchy for screen readers

      - [ ] **Link Context:** Link text is descriptive and meaningful

      - [ ] **Color Independence:** Information not conveyed by color alone

      - [ ] **Keyboard Navigation:** All interactive elements are keyboard accessible


      ### Performance Considerations

      Optimize markdown for performance:


      - [ ] **Image Optimization:** Images are appropriately sized and compressed

      - [ ] **Diagram Complexity:** Mermaid diagrams are not overly complex

      - [ ] **File Size:** Markdown files are reasonably sized for quick loading

      - [ ] **External Dependencies:** Minimize external resource dependencies


      ---'
  code_review_standards:
    description: Code Review Standards
    content: '**Purpose:** Review criteria for markdown documentation with focus on LLM optimization and technical accuracy

      **Scope:** All markdown files in documentation projects

      **Role:** Technical Documentation Specialist and LLM Content Optimizer


      ### Review Priorities


      #### Critical Issues (Must Fix)

      1. **Broken Links:** All internal and external links must be functional

      2. **Template Compliance:** Documents must follow template structure exactly

      3. **Command Accuracy:** All commands and code examples must be tested and functional

      4. **Structural Consistency:** Heading hierarchy and organization must be correct


      #### High Priority Issues

      1. **LLM Optimization:** Remove verbose explanations of standard development tasks

      2. **Content Redundancy:** Eliminate duplicate information across documents

      3. **Missing Context:** Ensure sufficient context for task completion

      4. **Inconsistent Terminology:** Use consistent terms throughout documentation


      #### Medium Priority Issues

      1. **Formatting Consistency:** Standardize code blocks, lists, and emphasis

      2. **Link Organization:** Optimize internal linking and cross-references

      3. **Content Organization:** Improve information hierarchy and flow

      4. **Language Clarity:** Enhance readability and precision


      ### LLM Optimization Review


      #### Content Compression Checklist

      - [ ] **Basic Tool Explanations:** Remove installation and basic usage instructions for standard tools

      - [ ] **Verbose Command Descriptions:** Replace with concise command-first format

      - [ ] **Redundant Context:** Eliminate unnecessary background information

      - [ ] **Standard Procedures:** Compress to essential commands and parameters


      #### What to Preserve vs Remove

      **Preserve:** Exact commands, project-specific details, critical warnings, file paths

      **Remove:** Installation instructions for standard tools, basic explanations of widely-known concepts, step-by-step breakdowns of common operations, verbose descriptions of standard tool functionality


      ### Technical Accuracy Review


      #### Command and Link Validation

      - [ ] **Syntax Accuracy:** All commands use correct syntax and parameters

      - [ ] **Path Validity:** File paths and references are accurate

      - [ ] **Internal Links:** All relative links resolve correctly

      - [ ] **External Links:** All external URLs are accessible and current


      ### Quality Assurance Checklist


      #### Pre-Review Validation

      - [ ] **Markdown Linting:** Document passes markdownlint validation

      - [ ] **Spell Check:** No spelling errors or typos

      - [ ] **Link Check:** All links validated and functional

      - [ ] **Template Compliance:** All required sections present, placeholders replaced


      #### Content Review

      - [ ] **Accuracy Verification:** All information is current and correct

      - [ ] **Completeness Check:** All necessary information included

      - [ ] **Redundancy Elimination:** No duplicate information

      - [ ] **LLM Optimization:** Verbose explanations removed appropriately


      ### Common Review Patterns

      **Frequent Issues:** Over-explanation of basic tools, broken internal links, inconsistent code block language specification, template placeholders not replaced, redundant information across documents

      **Quick Fixes:** Command compression, link updates, language specification, placeholder replacement, cross-reference cleanup


      ---


      **Usage:** Apply these rules during Documentation Pass, Refactoring Pass, and Code Review Pass for all markdown content. Use the rendering validation checklist before committing any markdown changes to ensure proper display across all platforms.'
code_review:
  role: Senior Engineer
  standards: '**Purpose:** Review criteria for markdown documentation with focus on LLM optimization and technical accuracy

    **Scope:** All markdown files in documentation projects

    **Role:** Technical Documentation Specialist and LLM Content Optimizer


    ### Review Priorities


    #### Critical Issues (Must Fix)

    1. **Broken Links:** All internal and external links must be functional

    2. **Template Compliance:** Documents must follow template structure exactly

    3. **Command Accuracy:** All commands and code examples must be tested and functional

    4. **Structural Consistency:** Heading hierarchy and organization must be correct


    #### High Priority Issues

    1. **LLM Optimization:** Remove verbose explanations of standard development tasks

    2. **Content Redundancy:** Eliminate duplicate information across documents

    3. **Missing Context:** Ensure sufficient context for task completion

    4. **Inconsistent Terminology:** Use consistent terms throughout documentation


    #### Medium Priority Issues

    1. **Formatting Consistency:** Standardize code blocks, lists, and emphasis

    2. **Link Organization:** Optimize internal linking and cross-references

    3. **Content Organization:** Improve information hierarchy and flow

    4. **Language Clarity:** Enhance readability and precision


    ### LLM Optimization Review


    #### Content Compression Checklist

    - [ ] **Basic Tool Explanations:** Remove installation and basic usage instructions for standard tools

    - [ ] **Verbose Command Descriptions:** Replace with concise command-first format

    - [ ] **Redundant Context:** Eliminate unnecessary background information

    - [ ] **Standard Procedures:** Compress to essential commands and parameters


    #### What to Preserve vs Remove

    **Preserve:** Exact commands, project-specific details, critical warnings, file paths

    **Remove:** Installation instructions for standard tools, basic explanations of widely-known concepts, step-by-step breakdowns of common operations, verbose descriptions of standard tool functionality


    ### Technical Accuracy Review


    #### Command and Link Validation

    - [ ] **Syntax Accuracy:** All commands use correct syntax and parameters

    - [ ] **Path Validity:** File paths and references are accurate

    - [ ] **Internal Links:** All relative links resolve correctly

    - [ ] **External Links:** All external URLs are accessible and current


    ### Quality Assurance Checklist


    #### Pre-Review Validation

    - [ ] **Markdown Linting:** Document passes markdownlint validation

    - [ ] **Spell Check:** No spelling errors or typos

    - [ ] **Link Check:** All links validated and functional

    - [ ] **Template Compliance:** All required sections present, placeholders replaced


    #### Content Review

    - [ ] **Accuracy Verification:** All information is current and correct

    - [ ] **Completeness Check:** All necessary information included

    - [ ] **Redundancy Elimination:** No duplicate information

    - [ ] **LLM Optimization:** Verbose explanations removed appropriately


    ### Common Review Patterns

    **Frequent Issues:** Over-explanation of basic tools, broken internal links, inconsistent code block language specification, template placeholders not replaced, redundant information across documents

    **Quick Fixes:** Command compression, link updates, language specification, placeholder replacement, cross-reference cleanup


    ---


    **Usage:** Apply these rules during Documentation Pass, Refactoring Pass, and Code Review Pass for all markdown content. Use the rendering validation checklist before committing any markdown changes to ensure proper display across all platforms.'
quality_gates: []
