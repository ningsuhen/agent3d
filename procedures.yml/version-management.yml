name: Version Management Procedures
description: Automatic version updates for templates and framework YAML files
version: 1.0.0
last_updated: '2025-01-29'
file_categories:
  templates:
    description: Template files that require version tracking
    patterns:
    - templates/*.template.yml
    - templates/*.template.md
    - templates/index.yml
    version_field: metadata.version
    version_comment: '<!-- Template Version: {version} -->'
  framework_yaml:
    description: Framework YAML files that require version tracking
    patterns:
    - procedures.yml/*.yml
    - passes.yml/*.yml
    - rules.yml/*.yml
    - .agent3d-config.yml
    - AGENT-GUIDELINES.yml
    version_field: version
    version_comment: '# Framework Version: {version}'
  generated_files:
    description: Files generated from templates
    patterns:
    - docs/*.md
    - docs/**/*.md
    - .agent3d-config.yml
    version_tracking: template_version_comment
version_update_rules:
  automatic_increment:
    trigger_conditions:
    - file_modification
    - content_change
    - ddd_pass_execution
    increment_strategy:
      patch: content_updates, bug_fixes, minor_changes
      minor: new_features, structure_changes, significant_updates
      major: breaking_changes, complete_rewrites, api_changes
    default_increment: patch
  version_format:
    semantic_versioning: MAJOR.MINOR.PATCH
    examples:
    - 1.0.0 → 1.0.1 (patch)
    - 1.0.1 → 1.1.0 (minor)
    - 1.1.0 → 2.0.0 (major)
implementation:
  pre_write_hooks:
    description: Execute before writing any template or framework file
    steps:
    - detect_file_category
    - read_current_version
    - determine_increment_type
    - calculate_new_version
    - update_version_metadata
    - add_version_comment
  version_detection:
    yaml_files:
      primary_field: version
      fallback_fields:
      - metadata.version
      - template_version
      default_version: 1.0.0
    markdown_files:
      version_comment_pattern: '<!-- Template Version: (\d+\.\d+\.\d+) -->'
      metadata_pattern: 'version: (\d+\.\d+\.\d+)'
      default_version: 1.0.0
  version_update_process:
    read_current:
    - parse_file_content
    - extract_version_from_metadata
    - extract_version_from_comments
    - use_default_if_not_found
    calculate_new:
    - determine_change_type
    - apply_increment_strategy
    - validate_version_format
    write_updated:
    - update_metadata_version
    - update_version_comments
    - update_last_updated_timestamp
    - preserve_file_structure
agent_instructions:
  before_file_write:
    mandatory_checks:
    - 'is_template_file: Check if file matches template patterns'
    - 'is_framework_yaml: Check if file matches framework YAML patterns'
    - 'requires_version_update: Determine if version update is needed'
    version_update_workflow:
    - read_current_version_from_file
    - determine_change_significance
    - calculate_new_version_number
    - update_version_in_metadata
    - add_or_update_version_comment
    - update_last_updated_timestamp
    change_significance_detection:
      patch_changes:
      - typo_fixes
      - formatting_improvements
      - minor_content_updates
      - comment_additions
      minor_changes:
      - new_sections_added
      - new_fields_added
      - structure_enhancements
      - feature_additions
      major_changes:
      - breaking_format_changes
      - complete_restructuring
      - api_breaking_changes
      - major_workflow_changes
file_specific_rules:
  template_files:
    version_location: metadata.version
    comment_format: '<!-- Template Version: {version} -->'
    timestamp_field: metadata.last_updated
    timestamp_format: YYYY-MM-DD
  procedure_files:
    version_location: version
    comment_format: '# Version: {version}'
    timestamp_field: last_updated
    timestamp_format: YYYY-MM-DD
  config_files:
    version_location: metadata.configuration_version
    comment_format: '# Configuration Version: {version}'
    timestamp_field: metadata.migration_date
    timestamp_format: YYYY-MM-DD
integration:
  ddd_passes:
    foundation_pass:
    - update_config_template_version
    - update_generated_config_version
    development_pass:
    - update_template_versions_on_modification
    - track_template_usage_in_exec_plans
    documentation_pass:
    - update_documentation_template_versions
    - ensure_version_consistency
  template_system:
    rewrite_procedures:
    - check_template_version_before_rewrite
    - update_template_version_after_rewrite
    - track_version_changes_in_generated_files
    template_usage:
    - embed_template_version_in_generated_files
    - track_template_source_version
    - enable_version_based_rewrite_detection
validation:
  version_format:
    pattern: ^\d+\.\d+\.\d+$
    examples:
    - 1.0.0
    - 2.1.3
    - 10.0.0
    invalid_examples:
    - '1.0'
    - v1.0.0
    - 1.0.0-beta
  version_progression:
    rules:
    - new_version_must_be_greater_than_current
    - patch_increment_only_increases_patch_number
    - minor_increment_resets_patch_to_zero
    - major_increment_resets_minor_and_patch_to_zero
  timestamp_format:
    pattern: ^\d{4}-\d{2}-\d{2}$
    command: date +%Y-%m-%d
    never_use_llm_knowledge: true
  inherits_from: common-patterns.yml#validation_rules.universal_requirements
error_handling:
  version_parsing_failure:
    action: use_default_version_1.0.0
    log: warn_about_version_parsing_failure
  version_update_failure:
    action: proceed_with_file_write_without_version_update
    log: error_version_update_failed
  invalid_version_format:
    action: use_default_version_1.0.0
    log: warn_about_invalid_version_format
monitoring:
  version_change_tracking:
    log_format: 'Version updated: {file_path} {old_version} → {new_version} ({change_type})'
  version_consistency_checks:
    frequency: after_each_pass
    scope: all_template_and_framework_files
  version_drift_detection:
    check_for: inconsistent_versions_across_related_files
    report_format: version_drift_report.yml
