# DDD Migration Procedure
# Discovers and executes DDD framework migrations

metadata:
    name: "DDD Migration"
    version: "1.0"
    description: "Discovers migration files and executes selected migrations"
    created_date: "2025-01-27"
    author: "Agent3D Framework"
    category: "framework_management"

purpose: |
    The DDD Migration procedure provides a systematic way to discover, select, and execute
    DDD framework migrations. It scans the migrations folder for available migrations,
    presents them to the user for selection, and executes the chosen migration following
    the migration YAML specification.

triggers: ['User requests framework migration', 'Configuration updates needed', 'Template format changes', 'Framework version upgrades', 'Manual migration execution']

procedure:
    discovery_phase:
        name: "Migration Discovery"
        description: "Discover available migrations in the migrations folder"
        steps:
          - id: "scan_migrations_folder"
            description: "Scan migrations/ for migration YAML files"
            actions:
              - "List all .yml files in migrations/ folder"
              - "Read metadata from each migration file"
              - "Check migration status in .agent3d-tmp/migration-tracker.yml"
            validation: ['Migration files are valid YAML', 'Each migration has required metadata', 'Migration tracker is accessible']

          - id: "load_migration_tracker"
            description: "Load current migration status"
            actions:
              - "Read .agent3d-tmp/migration-tracker.yml (create if missing)"
              - "Parse migration execution history"
              - "Identify pending, completed, and failed migrations"
            validation:
              - "Migration tracker loads successfully"
              - "Migration statuses are valid"

          - id: "categorize_migrations"
            description: "Categorize migrations by status and type"
            actions:
              - "Group migrations by status (pending, completed, failed)"
              - "Group migrations by impact level (low, medium, high)"
              - "Sort migrations by creation date"
            validation:
              - "All migrations are properly categorized"
              - "Migration metadata is complete"

    selection_phase:
        name: "Migration Selection"
        description: "Present migrations to user and get selection"
        steps:
          - id: "display_available_migrations"
            description: "Show available migrations to user"
            actions:
              - "Display migration list with status, name, and description"
              - "Show impact level and estimated time for each migration"
              - "Highlight pending migrations that are ready to execute"
              - "Show completed migrations for reference"
            format: |
                Available DDD Migrations:

                PENDING MIGRATIONS:
                [1] config-llm-migration (Medium Impact, ~10 min)
                    LLM-Friendly Configuration Migration
                    Status: pending

                COMPLETED MIGRATIONS:
                [âœ“] config-template-migration (Medium Impact)
                    Configuration Template Migration
                    Status: completed (2025-01-27)

          - id: "get_user_selection"
            description: "Get user's migration choice"
            actions:
              - "Prompt user to select migration by number or ID"
              - "Allow user to view migration details before selection"
              - "Confirm user's choice before proceeding"
            validation:
              - "User selection is valid"
              - "Selected migration exists and is executable"

          - id: "display_migration_details"
            description: "Show detailed information about selected migration"
            actions:
              - "Display migration metadata (name, version, description)"
              - "Show prerequisites and requirements"
              - "List migration steps and validation criteria"
              - "Show estimated time and impact level"
              - "Display rollback procedure"
            validation:
              - "Migration details are complete"
              - "Prerequisites are clearly stated"

    confirmation_phase:
        name: "Migration Confirmation"
        description: "Confirm migration execution with user"
        steps:
          - id: "check_prerequisites"
            description: "Verify migration prerequisites"
            actions: ['Check each prerequisite listed in migration file', 'Verify required files and tools are available', 'Validate current system state']
            validation:
              - "All prerequisites are met"
              - "System is ready for migration"

          - id: "confirm_execution"
            description: "Get final confirmation from user"
            actions: ['Display migration summary and impact', 'Show backup strategy and rollback plan', 'Ask for explicit confirmation to proceed', 'Allow user to cancel if needed']
            validation:
              - "User provides explicit confirmation"
              - "Backup strategy is understood"

    execution_phase:
        name: "Migration Execution"
        description: "Execute the selected migration"
        steps:
          - id: "update_tracker_start"
            description: "Mark migration as in progress"
            actions:
              - "Update .agent3d-tmp/migration-tracker.yml status to 'in_progress'"
              - "Record execution start time and executor"
              - "Create execution log entry"
            validation:
              - "Tracker updated successfully"
              - "Migration marked as in progress"

          - id: "create_backups"
            description: "Create backups of target files"
            actions:
              - "Create timestamped backups of files listed in backup_targets"
              - "Verify backup creation and integrity"
              - "Record backup locations in tracker"
            validation:
              - "All backups created successfully"
              - "Backup integrity verified"

          - id: "execute_migration_steps"
            description: "Execute migration steps in sequence"
            actions: ['Execute each step defined in migration YAML', 'Validate step completion before proceeding', 'Log step execution and results', 'Stop execution if any step fails']
            validation: ['Each step completes successfully', 'Step validation criteria are met', 'No critical errors occur']

          - id: "validate_migration"
            description: "Validate migration success"
            actions: ['Check all validation criteria from migration file', 'Verify system functionality after migration', 'Test critical components and integrations']
            validation: ['All validation criteria pass', 'System functions correctly', 'No regressions detected']

          - id: "update_tracker_complete"
            description: "Mark migration as completed"
            actions:
              - "Update .agent3d-tmp/migration-tracker.yml status to 'completed'"
              - "Record execution completion time"
              - "Add success notes and validation results"
            validation:
              - "Tracker updated with completion status"
              - "Migration marked as successful"

    rollback_phase:
        name: "Migration Rollback (if needed)"
        description: "Rollback migration if execution fails"
        steps:
          - id: "detect_failure"
            description: "Detect migration failure"
            triggers: ['Step validation fails', 'Critical error occurs', 'User requests rollback']
            actions: ['Stop migration execution immediately', 'Log failure details and error messages', 'Prepare for rollback procedure']

          - id: "execute_rollback"
            description: "Execute rollback procedure"
            actions: ['Follow rollback procedure from migration file', 'Restore backups to original locations', 'Verify system state after rollback', 'Clean up migration artifacts']
            validation: ['System restored to pre-migration state', 'All backups restored successfully', 'No migration artifacts remain']

          - id: "update_tracker_failed"
            description: "Mark migration as failed"
            actions:
              - "Update .agent3d-tmp/migration-tracker.yml status to 'failed'"
              - "Record failure details and rollback completion"
              - "Add troubleshooting notes"
            validation:
              - "Tracker updated with failure status"
              - "Failure details recorded"

integration_points:
    foundation_pass:
        trigger: "Before configuration setup"
        action: "Check for pending configuration migrations"

    development_pass:
        trigger: "Before code analysis"
        action: "Ensure framework is up to date"

    manual_execution:
        trigger: "User command or request"
        action: "Execute selected migration"

safety_measures: ['Always create backups before migration', 'Validate prerequisites before execution', 'Stop execution on first failure', 'Provide clear rollback procedures', 'Track all migration attempts', 'Require explicit user confirmation']

success_criteria: ['Migration executes without errors', 'All validation criteria pass', 'System functionality preserved', 'Migration tracker updated correctly', 'Backups created and verified']

failure_handling: ['Immediate rollback on failure', 'Detailed error logging', 'System state restoration', 'User notification of failure', 'Troubleshooting guidance']

# LLM Instructions for DDD Migration:
# 1. Always scan migrations/ folder first
# 2. Present clear migration options to user
# 3. Get explicit confirmation before execution
# 4. Follow migration steps exactly as defined
# 5. Create backups before making changes
# 6. Validate each step before proceeding
# 7. Update .agent3d-tmp/migration-tracker.yml throughout process
# 8. Execute rollback immediately on failure
