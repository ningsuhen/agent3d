metadata:
   name: "Acceptance Criteria Template"
   type: "template"
   format: "markdown_content_with_yaml_metadata"
   purpose: "Define acceptance criteria for all requirements and user stories"
   version: "2.0.0"
   created: "2025-01-29"
   last_updated: "2025-01-29"

usage:
   description: "This document defines the acceptance criteria for all requirements and user stories. Each criterion must be testable, measurable, and clearly define the conditions for acceptance"

   required_sections:
    - "Functional Acceptance Criteria - feature-specific criteria with scenarios"
    - "Non-Functional Acceptance Criteria - performance, security, usability"
    - "Integration Acceptance Criteria - external system and database integration"
    - "Quality Gates - code quality, documentation, deployment"
    - "Test Scenarios - happy path, edge cases, negative tests"
    - "Definition of Done - feature and release level criteria"
    - "Validation Process - review and approval process"

template_content: |
   # Acceptance Criteria

   **Project:** [Project Name]
   **Version:** [Version Number]
   **Date:** [Date]

   ## Overview

   This document defines the acceptance criteria for all requirements and user stories. Each criterion must be testable, measurable, and clearly define the conditions for acceptance.

   ## Functional Acceptance Criteria

   ### Feature 1: [Feature Name]

   **Requirement ID:** REQ-001
   **User Story:** US-001

   #### Scenario 1: [Scenario Name]

   **Given:** [Initial conditions]
   **When:** [Action or event]
   **Then:** [Expected outcome]

   **Acceptance Criteria:**

   - [ ] [Specific testable condition 1]
   - [ ] [Specific testable condition 2]
   - [ ] [Specific testable condition 3]

   #### Scenario 2: [Scenario Name]

   **Given:** [Initial conditions]
   **When:** [Action or event]
   **Then:** [Expected outcome]

   **Acceptance Criteria:**

   - [ ] [Specific testable condition 1]
   - [ ] [Specific testable condition 2]
   - [ ] [Specific testable condition 3]

   ### Feature 2: [Feature Name]

   **Requirement ID:** REQ-002
   **User Story:** US-002

   #### Scenario 1: [Scenario Name]

   **Given:** [Initial conditions]
   **When:** [Action or event]
   **Then:** [Expected outcome]

   **Acceptance Criteria:**

   - [ ] [Specific testable condition 1]
   - [ ] [Specific testable condition 2]
   - [ ] [Specific testable condition 3]

   ## Non-Functional Acceptance Criteria

   ### Performance Criteria

   **Requirement ID:** REQ-PERF-001

   #### Response Time

   - [ ] Page load time must be less than 2 seconds
   - [ ] API response time must be less than 500ms
   - [ ] Database query time must be less than 100ms

   #### Throughput

   - [ ] System must handle 1000 concurrent users
   - [ ] System must process 10,000 transactions per hour
   - [ ] Batch processing must complete within 4 hours

   #### Scalability

   - [ ] System must scale to 10,000 users without performance degradation
   - [ ] Database must handle 1TB of data without performance impact
   - [ ] System must auto-scale based on load

   ### Security Criteria

   **Requirement ID:** REQ-SEC-001

   #### Authentication

   - [ ] Users must authenticate with valid credentials
   - [ ] Failed login attempts must be limited to 3 tries
   - [ ] Account must be locked after 3 failed attempts
   - [ ] Password must meet complexity requirements

   #### Authorization

   - [ ] Users can only access authorized resources
   - [ ] Admin users have elevated privileges
   - [ ] Guest users have read-only access
   - [ ] API endpoints enforce proper authorization

   #### Data Protection

   - [ ] Sensitive data must be encrypted at rest
   - [ ] Data transmission must use HTTPS
   - [ ] Personal data must comply with privacy regulations
   - [ ] Data backup must be encrypted

   ### Usability Criteria

   **Requirement ID:** REQ-UX-001

   #### User Interface

   - [ ] Interface must be responsive on mobile devices
   - [ ] Interface must be accessible (WCAG 2.1 AA compliance)
   - [ ] Interface must support keyboard navigation
   - [ ] Interface must provide clear error messages

   #### User Experience

   - [ ] New users can complete onboarding in under 5 minutes
   - [ ] Common tasks can be completed in 3 clicks or less
   - [ ] Help documentation is easily accessible
   - [ ] User feedback is collected and actionable

   ## Integration Acceptance Criteria

   ### External System Integration

   **Requirement ID:** REQ-INT-001

   #### API Integration

   - [ ] API calls must complete successfully
   - [ ] Error handling must be implemented for all API failures
   - [ ] Data format must match specification
   - [ ] Rate limiting must be respected

   #### Database Integration

   - [ ] Data must be stored correctly in the database
   - [ ] Database transactions must maintain ACID properties
   - [ ] Data migration must complete without data loss
   - [ ] Database performance must meet requirements

   ## Quality Gates

   ### Code Quality

   - [ ] Code coverage must be at least 80%
   - [ ] All unit tests must pass
   - [ ] All integration tests must pass
   - [ ] Code must pass static analysis checks
   - [ ] Code must follow established coding standards

   ### Documentation Quality

   - [ ] All features must be documented
   - [ ] API documentation must be complete and accurate
   - [ ] User documentation must be clear and comprehensive
   - [ ] Technical documentation must be up to date

   ### Deployment Quality

   - [ ] Deployment must be automated
   - [ ] Rollback procedures must be tested
   - [ ] Environment configuration must be validated
   - [ ] Monitoring and alerting must be in place

   ## Test Scenarios

   ### Happy Path Scenarios

   1. **Scenario:** [Normal user flow]
      - **Steps:** [Detailed steps]
      - **Expected Result:** [What should happen]
      - **Acceptance Criteria:** [Specific conditions to verify]

   2. **Scenario:** [Another normal flow]
      - **Steps:** [Detailed steps]
      - **Expected Result:** [What should happen]
      - **Acceptance Criteria:** [Specific conditions to verify]

   ### Edge Case Scenarios

   1. **Scenario:** [Boundary condition]
      - **Steps:** [Detailed steps]
      - **Expected Result:** [What should happen]
      - **Acceptance Criteria:** [Specific conditions to verify]

   2. **Scenario:** [Error condition]
      - **Steps:** [Detailed steps]
      - **Expected Result:** [How errors should be handled]
      - **Acceptance Criteria:** [Specific conditions to verify]

   ### Negative Test Scenarios

   1. **Scenario:** [Invalid input]
      - **Steps:** [Detailed steps]
      - **Expected Result:** [How system should respond]
      - **Acceptance Criteria:** [Specific conditions to verify]

   2. **Scenario:** [Unauthorized access]
      - **Steps:** [Detailed steps]
      - **Expected Result:** [Security response]
      - **Acceptance Criteria:** [Specific conditions to verify]

   ## Definition of Done

   ### Feature Level

   - [ ] All acceptance criteria are met
   - [ ] All tests are passing
   - [ ] Code review is completed
   - [ ] Documentation is updated
   - [ ] Security review is completed
   - [ ] Performance testing is completed

   ### Release Level

   - [ ] All features meet acceptance criteria
   - [ ] Integration testing is completed
   - [ ] User acceptance testing is completed
   - [ ] Performance benchmarks are met
   - [ ] Security audit is completed
   - [ ] Deployment procedures are tested

   ## Validation Process

   ### Review Process

   1. **Requirements Review:** Stakeholders validate acceptance criteria
   2. **Technical Review:** Development team validates feasibility
   3. **Test Review:** QA team validates testability
   4. **User Review:** End users validate usability

   ### Approval Process

   - **Business Approval:** [Who approves business criteria]
   - **Technical Approval:** [Who approves technical criteria]
   - **Quality Approval:** [Who approves quality criteria]
   - **Final Approval:** [Who gives final approval]

   ---

   **Document Control:**

   - **Created by:** [Author name]
   - **Reviewed by:** [Reviewer names]
   - **Approved by:** [Approver names]
   - **Last Updated:** [Date]
   - **Next Review:** [Date]

examples:
   project_name: "E-commerce Platform, Mobile App, API Gateway"
   version_number: "1.0, 2.1, 3.0-beta"
   feature_name: "User Registration, Payment Processing, Search Functionality"
   requirement_id: "REQ-001, REQ-PERF-001, REQ-SEC-001"
   user_story: "US-001, US-002, US-003"
   scenario_name: "Successful Login, Invalid Password, Network Timeout"
   initial_conditions: "User is on login page, Database is available, User has valid account"
   action_or_event: "User enters credentials, User clicks submit, System validates input"
   expected_outcome: "User is logged in, Error message displayed, Success confirmation shown"

validation:
   rules:
    - "Each criterion must be testable and measurable"
    - "All scenarios must have clear Given-When-Then structure"
    - "Acceptance criteria must be specific and verifiable"
    - "Quality gates must include measurable thresholds"
    - "Definition of Done must be comprehensive"
    - "Validation process must include all stakeholder groups"
   references: [ "BASE.template.yml#universal-validation-rules" ]
