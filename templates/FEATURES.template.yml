metadata:
  name: "Features Index Template"
  type: "template"
  format: "markdown_content_with_yaml_metadata"
  purpose: "Template for docs/FEATURES.md - serves as an index of all feature modules"
  version: "2.0.0"
  created: "2025-01-29"
  last_updated: "2025-01-29"

usage:
  description: "Template for docs/FEATURES.md - serves as an index of all feature modules"
  structure: "Index of feature modules in docs/features/ directory with merged FT-TC structure"

  usage_scenarios:
    features_index: "Use this template for the main docs/FEATURES.md file"
    individual_features: "Use FEATURE-module.template.yml for creating section files in docs/features/"

template_content: |
  # Features Index

  <!-- Template Version: {{template_version}} -->

  This document provides an index of all {{PROJECT_NAME}} features organized by module with FT-* identifiers for traceability.

  ## Important Note

  **{{PROJECT_NAME}} is a {{PROJECT_TYPE}} framework.** {{PROJECT_DESCRIPTION}}

  ## New Merged FT-TC Structure

  **As of {{MIGRATION_DATE}}**, {{PROJECT_NAME}} has migrated to a **merged FT-TC structure** where features and their associated test cases are documented together in modular section files located in `docs/features/`. This replaces the previous separate `FEATURES.md` and `TEST-CASES.md` files.

  ### Structure Benefits:
  - **Modular Organization:** Features organized by logical sections
  - **Integrated Testing:** Test cases directly associated with their features
  - **Better Traceability:** Clear FT-TC relationships in a single location
  - **Scalability:** Easy to add new feature sections without modifying multiple files
  - **Code Location Linking:** Direct links from features to implementation code for better analysis

  ### Migration Guide:
  - **Old:** Single `docs/FEATURES.md` file with separate `docs/TEST-CASES.md`
  - **New:** Multiple section files in `docs/features/` directory with merged FT-TC content
  - **Compatibility:** Drift scanner supports both structures with automatic fallback

  ## Feature Modules

  ### {{MODULE_CATEGORY_1}}
  - [FT-{{SECTION_1}}](features/{{section_1_file}}.md) - {{Module_1_Title}} ({{feature_count_1}} features) {{status_1}}

  ### {{MODULE_CATEGORY_2}}
  - [FT-{{SECTION_2}}](features/{{section_2_file}}.md) - {{Module_2_Title}} ({{feature_count_2}} features) {{status_2}}

  ### {{MODULE_CATEGORY_3}}
  - [FT-{{SECTION_3}}](features/{{section_3_file}}.md) - {{Module_3_Title}} ({{feature_count_3}} features) {{status_3}}

  ## Quick Reference

  - **Total Features:** {{total_features}} features across {{total_modules}} modules
  - **Status:** {{overall_status}}
  - **Documentation:** Each module has detailed feature specifications with test cases
  - **Navigation:** Click any module link above to view detailed features and test cases

  ## Working with the New Structure

  ### For Developers:
  ```bash
  # View all features by section
  ls docs/features/

  # View specific feature section
  cat docs/features/{{example_section}}.md

  # Run drift analysis on new structure
  python3 tools/drift_scanner.py --mode ft-mapping
  ```

  ### For Documentation:
  - **Add new features:** Edit appropriate section file in `docs/features/`
  - **Create new sections:** Add new `.md` file in `docs/features/` directory
  - **Test case integration:** Include test cases directly under each feature
  - **Validation:** Use drift scanner to verify FT-TC relationships

  ### Template Usage:
  - **Features Index:** Use `templates/FEATURES.template.yml`
  - **New modules:** Use `templates/FEATURE-module.template.yml`

  ## Code Location Field

  **New Enhancement ({{ENHANCEMENT_DATE}}):** All features now include a **Code Location** field that links features to their actual implementation code. This enhancement improves:

  - **Feature-Implementation Analysis:** Automated verification of feature-code alignment
  - **Test Writing:** Clear guidance on what code to import and test
  - **Quality Assessment:** Better code review and maintenance capabilities
  - **Drift Detection:** Enhanced accuracy in feature-implementation mapping

  **Documentation:** See [CODE-LOCATION-FIELD.md](docs/CODE-LOCATION-FIELD.md) for complete documentation and examples.

  ## Related Documentation

  - **[Code Location Field](docs/CODE-LOCATION-FIELD.md)** - Complete guide to the new Code Location field
  - **[High-Level Design](docs/HIGH-LEVEL-DESIGN.md)** - System architecture and component designs
  - **[Requirements](docs/REQUIREMENTS.md)** - Functional and non-functional requirements
  - **[Tasks](docs/TASKS.md)** - Implementation backlog and priorities
  - **[DDD Procedures](procedures.yml/)** - Feature completion criteria and validation procedures

examples:
  project_name: "Agent3D, MyProject, SystemName"
  project_type: "documentation-only, software, configuration"
  migration_date: "2025-01-27, 2024-12-15"
  section_1: "CORE, AUTH, API"
  section_1_file: "core, authentication, api-endpoints"
  feature_count_1: "3, 5, 8"
  status_1: "âœ… **PRODUCTION**, ðŸš§ **DEVELOPMENT**, ðŸ“‹ **PLANNED**"

validation:
  rules: [ "See Base Template System for universal validation rules", "Documentation Templates validation" ]
  references: [ "BASE.template.yml#universal_validation_rules" ]
