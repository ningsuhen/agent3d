metadata:
    name: "Base Template System"
    type: "template"
    format: "markdown_content_with_yaml_metadata"
    purpose: "Universal template structure and validation system for Agent3D documentation"
    version: "4.0.0"
    created: "2025-01-29"
    last_updated: "2025-01-29"
    refactoring_version: "1.0.0"
    features:
      - "Universal template structure and validation rules"
      - "Standardized metadata format across all templates"
      - "Common placeholder and variable system"
      - "Date command validation and system integration"
      - "Template compliance and quality assurance"
      - "Consolidated validation rules and inheritance patterns"

usage:
    description: "Unified template structure and validation system for Agent3D documentation"

    common_template_structure:
        standard_sections:
          - "Format Specification - Document purpose and requirements"
          - "Template Content - Placeholder structure with {{variables}}"
          - "Validation - Universal + template-specific rules"

    universal_variables:
      - "{{document_title}}, {{document_purpose}}, {{project_name}}"
      - "{{author}}, {{creation_date}}, {{last_updated}}, {{version}}"
      - "{{template_version}} - CRITICAL: Always include for rewrite detection"

    date_commands_critical:
        rule: "ALWAYS use date +%Y-%m-%d for creation_date and last_updated"
        warning: "NEVER use LLM knowledge for dates - use system commands only"

template_content: |
    # Base Template System

    **PURPOSE:** Unified template structure and validation system for Agent3D documentation.

    ## Common Template Structure

    **STANDARD SECTIONS:**

    1. **Format Specification** - Document purpose and requirements
    2. **Template Content** - Placeholder structure with {{variables}}
    3. **Validation** - Universal + template-specific rules

    **UNIVERSAL VARIABLES:**

    - `{{document_title}}`, `{{document_purpose}}`, `{{project_name}}`
    - `{{author}}`, `{{creation_date}}`, `{{last_updated}}`, `{{version}}`

    **DATE COMMANDS (CRITICAL):**

    - **ALWAYS** use `date +%Y-%m-%d` for creation_date and last_updated
    - **NEVER** use LLM knowledge for dates - use system commands only

    ## Template Variable Reference

    ### Core Document Variables

    - `{{document_title}}` - Document title
    - `{{document_purpose}}` - Purpose statement
    - `{{project_name}}` - Project name
    - `{{author}}` - Document author
    - `{{creation_date}}` - Creation timestamp (USE: `date +%Y-%m-%d`)
    - `{{last_updated}}` - Last update timestamp (USE: `date +%Y-%m-%d`)
    - `{{version}}` - Document version
    - `{{template_version}}` - Template version for rewrite detection (CRITICAL)

    ### Content Structure Variables

    - `{{module_name}}`, `{{sub_module_name}}` - Organizational structure
    - `{{content_section_title}}` - Dynamic section naming
    - `{{main_content}}` - Primary content area
    - `{{additional_validation_rules}}` - Template-specific validation

    ### Language-Specific Variables

    - `{{language}}` - Programming language for code blocks
    - `{{installation_commands}}` - Language-specific installation
    - `{{code_example}}` - Language-specific code examples

    ### Project-Specific Variables

    - `{{feature_name}}`, `{{feature_description}}` - Feature documentation
    - `{{status}}` - Status indicators (`[x]`/`[ ]`/`[~]`)
    - `{{acceptance_criteria}}` - Testable acceptance criteria

variable_reference:
    core_document:
        document_title: "Document title"
        document_purpose: "Purpose statement"
        project_name: "Project name"
        author: "Document author"
        creation_date: "Creation timestamp (USE: date +%Y-%m-%d)"
        last_updated: "Last update timestamp (USE: date +%Y-%m-%d)"
        version: "Document version"

    content_structure:
        module_name: "Organizational structure"
        sub_module_name: "Organizational structure"
        content_section_title: "Dynamic section naming"
        main_content: "Primary content area"
        additional_validation_rules: "Template-specific validation"

    language_specific:
        language: "Programming language for code blocks"
        installation_commands: "Language-specific installation"
        code_example: "Language-specific code examples"

    project_specific:
        feature_name: "Feature documentation"
        feature_description: "Feature documentation"
        status: "Status indicators ([x]/[ ]/[~])"
        acceptance_criteria: "Testable acceptance criteria"

universal_validation_rules:
    all_templates_must:
      - "Follow DDD Procedures for common validation checklist"
      - "Replace ALL {{placeholders}} with actual content"
      - "Remove <template> and <example> tags"
      - "Use ## Groups / ### Sub-Groups structure"
      - "Include functional links and single-line entries"
      - "Mark [x] only with verifiable evidence"

    common_validation_patterns:
        placeholder_replacement:
            rule: "All {{placeholders}} must be replaced with actual content"
            validation: "grep -n '{{.*}}' file.yml should return no results"
            critical: true

        yaml_syntax:
            rule: "Valid YAML syntax required"
            validation: "python -c 'import yaml; yaml.safe_load(open(\"file.yml\"))'"
            critical: true

        metadata_completeness:
            rule: "All required metadata fields must be present"
            required_fields: [ "name", "type", "purpose", "version", "created", "last_updated" ]
            validation: "Check metadata section contains all required fields"
            critical: true

        content_structure:
            rule: "Follow standard content organization"
            requirements: [ "Clear sections", "Logical hierarchy", "Consistent formatting" ]
            validation: "Manual review for structure compliance"
            critical: false

template_specific_validation:
    documentation_templates:
        description: "FEATURES, REQUIREMENTS, TASKS, etc."
        rules:
          - "Format Compliance: Follow specified format patterns exactly"
          - "Priority Organization: Use High/Medium/Low/Completed structure where applicable"
          - "Status Indicators: Use [x]/[ ]/[~] consistently"
          - "Functional Grouping: Organize content by logical functional areas"
          - "Completion Criteria: Include clear acceptance criteria for each item"

    design_templates:
        description: "HIGH-LEVEL-DESIGN, DETAILED-DESIGN, etc."
        rules:
          - "Architecture Clarity: Clear system architecture and component relationships"
          - "Technical Accuracy: All technical specifications are accurate and testable"
          - "Diagram Validation: All diagrams render correctly and support the text"
          - "Interface Documentation: All APIs and interfaces properly documented"

    process_templates:
        description: "EXEC-PLAN, etc."
        rules:
          - "Step Sequencing: Logical step-by-step progression"
          - "Checkpoint Definition: Clear checkpoints and verification criteria"
          - "Risk Assessment: Identified risks with mitigation strategies"
          - "Resource Planning: Required resources and dependencies identified"

    user_focused_templates:
        description: "USER-STORIES, USER-JOURNEY-MAP, etc."
        rules:
          - "User Perspective: Written from user's point of view"
          - "Acceptance Criteria: Clear, testable acceptance criteria"
          - "Journey Mapping: Logical user flow and interaction patterns"
          - "Persona Alignment: Content aligns with defined user personas"

template_usage_process:
    steps:
      - "Access: Templates from ~/.agent3d/templates/"
      - "Replace: All {{placeholders}} with actual content"
      - "Remove: Template tags before finalizing"
      - "Validate: Against universal + specific rules"

version_tracking_system:
    purpose: "Enable intelligent rewrite detection and prevent unnecessary rewrites"
    implementation:
        template_version: "Each template has metadata.version field (e.g., 2.1.0)"
        generated_file_tracking: "Generated files include <!-- Template Version: X.X.X --> comment"
        rewrite_procedure_logic: "Compare template version with generated file version"

    rewrite_behavior:
        regular_rewrite: "Check version compatibility before rewriting"
        force_rewrite: "--force flag skips version checking"
        version_mismatch: "Proceed with rewrite if template version > file version"
        version_match: "Skip rewrite unless --force is used"

    version_format: "Semantic versioning (MAJOR.MINOR.PATCH)"
    version_examples:
        major_change: "3.0.0 - Breaking changes to template structure"
        minor_change: "2.1.0 - New features or significant improvements"
        patch_change: "2.0.1 - Bug fixes or minor improvements"

validation:
    rules: [ "See DDD Procedures - Template System for complete usage instructions" ]
    references: [ "procedures.yml/templates.yml#template-system" ]
