metadata:
    name: "Feature Module Template"
    type: "template"
    format: "markdown_content_with_yaml_metadata"
    purpose: "Template for docs/features/ section files"
    version: "2.1.0"
    created: "2025-01-29"
    last_updated: "2025-01-29"

usage:
    description: "Template for docs/features/ section files"
    naming_convention: "{{section_name}}.md, FT-{{SECTION}}-NNN, TC-{{SECTION}}-NNN"
    test_strategy: "5-8 test cases per feature. Sub-tests ONLY for parameterized testing (same logic, different parameters)"
    critical_requirement: "Follow Common Procedures for merged FT-TC structure"

template_content: |
    # FT-{{SECTION}} - {{Module Title}}

    <!-- Template Version: {{template_version}} -->

    ## FT-{{SECTION}}-001 - {{Feature Name}}
    - **Description:** {{Brief feature description}}
    - **Criteria:** {{Acceptance criteria}}
    - **Dependencies:** {{Related features/requirements}}
    - **Impact:** {{High/Medium/Low}} - {{Impact description}}
    - **Code Location:** {{module.path}}[{{ImportedObject/Class}}] | {{file_path}} | {{N/A for documentation-only}}
    - **Test Coverage:** {{5-8}} test cases covering all aspects
    - **Related Features:** [FT-{{RELATED_SECTION}}-{{NNN}}]({{related_file}}.md#ft-{{related_section}}-{{nnn}})
    - **Test Cases:**
        - [{{status}}] **TC-{{SECTION}}-001** - {{Core Functionality}} ({{Auto/Manual}}, {{H/M/L}}) {{✅/🚧/📋}}
        - [{{status}}] **TC-{{SECTION}}-002** - {{Edge Cases}} ({{Auto/Manual}}, {{H/M/L}}) {{✅/🚧/📋}}
        - [{{status}}] **TC-{{SECTION}}-003** - {{Error Handling}} ({{Auto/Manual}}, {{H/M/L}}) {{✅/🚧/📋}}
        - [{{status}}] **TC-{{SECTION}}-004** - {{Integration}} ({{Auto/Manual}}, {{H/M/L}}) {{✅/🚧/📋}}
        - [{{status}}] **TC-{{SECTION}}-005** - {{Performance}} ({{Auto/Manual}}, {{H/M/L}}) {{✅/🚧/📋}}
        - [{{status}}] **TC-{{SECTION}}-006** - {{Parameterized}} ({{Auto/Manual}}, {{H/M/L}}) {{✅/🚧/📋}}
            - [{{status}}] **TC-{{SECTION}}-006a** - {{Param 1}} - {{Same logic, diff input}}
            - [{{status}}] **TC-{{SECTION}}-006b** - {{Param 2}} - {{Same logic, diff input}}

    ## FT-{{SECTION}}-002 - {{Feature Name}}
    - **Description:** {{Brief feature description}}
    - **Criteria:** {{Acceptance criteria}}
    - **Dependencies:** {{Related features/requirements}}
    - **Impact:** {{High/Medium/Low}} - {{Impact description}}
    - **Code Location:** {{module.path}}[{{ImportedObject/Class}}] | {{file_path}} | {{N/A for documentation-only}}
    - **Test Coverage:** {{4-6}} test cases covering key scenarios
    - **Related Features:** [FT-{{SECTION}}-001]({{current_file}}.md#ft-{{section}}-001)
    - **Test Cases:**
        - [{{status}}] **TC-{{SECTION}}-007** - {{Basic Functionality}} ({{Auto/Manual}}, {{H/M/L}}) {{✅/🚧/📋}}
        - [{{status}}] **TC-{{SECTION}}-008** - {{Validation}} ({{Auto/Manual}}, {{H/M/L}}) {{✅/🚧/📋}}
        - [{{status}}] **TC-{{SECTION}}-009** - {{Boundary}} ({{Auto/Manual}}, {{H/M/L}}) {{✅/🚧/📋}}
        - [{{status}}] **TC-{{SECTION}}-010** - {{Security}} ({{Auto/Manual}}, {{H/M/L}}) {{✅/🚧/📋}}
        - [{{status}}] **TC-{{SECTION}}-011** - {{Cross-Platform}} ({{Auto/Manual}}, {{H/M/L}}) {{✅/🚧/📋}}
            - [{{status}}] **TC-{{SECTION}}-011a** - {{Platform 1}} - {{Same test, diff platform}}
            - [{{status}}] **TC-{{SECTION}}-011b** - {{Platform 2}} - {{Same test, diff platform}}

examples:
    section_examples: "security.md → FT-SEC-001, performance.md → FT-PERF-001"
    replacements:
        SECTION: "SEC/PERF"
        status: "[x]/[~]/[ ]"
        test_count: "numbers (5-8)"

    code_location_examples:
        python_class_method: "tools/drift_scanner.py#DriftScanner.analyze_code_locations"
        python_function: "tools/drift_scanner.py#analyze_drift"
        python_multiple: "tools/drift_scanner.py#DriftScanner._analyze_feature_implementation | passes.yml/10_reverse_pass.yml"
        typescript_file: "vscode-ddd-navigator/src/extension.ts"
        typescript_class: "vscode-ddd-navigator/src/providers/definitionProvider.ts#DddDefinitionProvider"
        shell_script: "tools/drift_scanner_mcp_server.sh"
        yaml_config: "passes.yml/3_development_pass.yml"
        yaml_multiple: "passes.yml/ | passes.yml/full_pass.yml"
        documentation_only: "N/A (Documentation standards and guidelines)"
        documentation_process: "N/A (Documentation framework quality process)"

critical_rules:
    code_location_rule: "Code Location = CODE BEING TESTED/DOCUMENTED, NOT TEST FILE LOCATION"

    correct_examples:
      - "tools/drift_scanner.py#DriftScanner.analyze_code_locations (Python class method being tested)"
      - "tools/drift_scanner_mcp_server.py#main (Python function being tested)"
      - "vscode-ddd-navigator/src/extension.ts (TypeScript file being tested)"
      - "passes.yml/3_development_pass.yml (YAML configuration being validated)"
      - "N/A (Documentation standards and guidelines) (Documentation-only feature)"

    wrong_examples:
      - "tests/test_drift_scanner.py (This is test file location)"
      - "tests/test_core_functionality.py (This is test file location)"
      - "spec/extension.spec.ts (This is test file location)"

code_location_discovery:
    when_unknown: "If the Code Location is not immediately known, use these steps to find it"

    steps:
        search_by_keywords:
          - "Use codebase search for key terms from feature description"
          - "Look for class names, function names, or module names mentioned"
          - "Search for related configuration keys or file patterns"

        analyze_description:
          - "Identify technical components mentioned in the feature"
          - "Look for file paths, class names, or module references"
          - "Check for imports or dependencies mentioned"

        use_codebase_retrieval: "Use codebase-retrieval tool with query like: 'Find code related to [feature functionality] including classes, functions, or modules that implement [specific capability]'"

        check_related_files:
          - "Look in logical directories (tools/, src/, lib/, etc.)"
          - "Check configuration files for related settings"
          - "Review existing test files for import statements (but don't use test paths as Code Location)"

        pattern_matching:
            drift_scanner_features: "Look in tools/drift_scanner.py, tools/drift_scanner_mcp_server.py"
            vscode_extension_features: "Look in vscode-ddd-navigator/src/ directory"
            pass_system_features: "Look in passes.yml/ directory for pass configurations"
            documentation_features: "Look in docs/ directory, templates/ directory"
            config_features: "Look in .agent3d-config.yml, pyproject.toml"
            shell_script_features: "Look in tools/ directory for .sh files"

        if_still_unknown:
          - "Use N/A (Feature description - code location to be determined)"
          - "Add TODO comment to find and update Code Location"
          - "Prioritize finding Code Location before implementing tests"

framework_classification:
    python_code: "tools/file.py#ClassName.method → Automated testing"
    typescript_code: "vscode-ddd-navigator/src/file.ts#ClassName → Automated testing"
    shell_scripts: "tools/script.sh → Automated testing"
    yaml_config: "passes.yml/pass_name.yml → Schema validation"
    documentation_only: "N/A (Description) → Manual validation"
    mixed_implementation: "code_file.py#Class | config.yml → Automated + Schema testing"

test_guidelines:
    test_types: "Core, Edge Cases, Error Handling, Integration, Performance, Security, Validation, Boundary"
    sub_tests:
        good_use: "Parameterized/Cross-platform/Data-driven (same logic, diff params)"
        bad_use: "Different logic/scenarios"

    examples:
        good: "TC-001 Password Validation → TC-001a Valid, TC-001b Too short, TC-001c No numbers"
        bad: "TC-001 Security → TC-001a Password ❌, TC-001b Auth ❌, TC-001c Authorization ❌"

post_creation:
    steps:
      - "Replace placeholders"
      - "Remove template tags"
      - "Update docs/FEATURES.md"
      - "Run drift scanner"

validation:
    rules: [ "See Base Template System for universal validation rules" ]
    references: [ "BASE.template.yml#universal-validation-rules" ]
