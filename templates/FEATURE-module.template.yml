metadata:
    name: "Feature Module Template"
    type: "template"
    format: "markdown_content_with_yaml_metadata"
    purpose: "Template for docs/features/ section files"
    version: "2.4.0"
    created: "2025-01-29"
    last_updated: "2025-01-29"
    new_features: "Prioritized test case selection guidelines, TC-ID optimization for rewrite force mode, comprehensive feature status system"

usage:
    description: "Template for docs/features/ section files"
    naming_convention: "{{section_name}}.md, FT-{{SECTION}}-NNN, TC-{{SECTION}}-NNN"

    # PRIORITY 1: Test Case Selection Guidelines (CRITICAL)
    test_case_selection_priority:
        philosophy: "Quality over quantity - select test cases based on feature needs and risk"
        decision_framework: "Use procedures.yml/test-case-guidelines.yml decision trees for every test case"
        complexity_ranges: "Simple(1-2), Moderate(2-4), Complex(3-6) based on feature analysis"
        always_test: "Core functionality, Error conditions, Integration points, Security boundaries"
        avoid_testing: "Simple getters/setters, Framework functionality, Obvious implementations, Duplicate scenarios"
        critical_requirement: "MUST analyze feature complexity and risk profile before selecting test cases"

    # PRIORITY 2: TC-ID Optimization (for rewrite force mode)
    tc_id_optimization:
        when_rewriting: "Optimize and compress test cases for quality improvement"
        compression_strategy: "Remove redundant, trivial, or low-value test cases"
        quality_focus: "Prioritize fewer, higher-quality test cases over comprehensive coverage"
        intelligent_numbering: "Compress TC-ID sequences and optimize numbering for clarity"
        decision_framework_application: "Apply selection criteria to determine optimal test case set"
        documentation: "Document compression decisions and rationale for removed test cases"

    # PRIORITY 3: Feature Status System
    feature_status_system:
        purpose: "Track feature lifecycle from conception to completion or retirement"
        status_values: "NEW, PLANNED, IN_DEVELOPMENT, FEATURE_IMPLEMENTED, TEST_IMPLEMENTED, READY, DEPRECATED, ARCHIVED"
        status_transitions: "Follow logical progression through development lifecycle"
        archive_implications: "ARCHIVED status allows deletion of associated code if not used by other active features"

        status_definitions:
            NEW: "Feature just identified/documented, awaiting planning"
            PLANNED: "Feature approved and scheduled for development"
            IN_DEVELOPMENT: "Code implementation in progress"
            FEATURE_IMPLEMENTED: "Code implementation complete, tests pending"
            TEST_IMPLEMENTED: "Test cases implemented and passing"
            READY: "Feature fully complete and ready for production use"
            DEPRECATED: "Feature marked for removal/replacement, still functional"
            ARCHIVED: "Feature no longer active, code can be safely deleted"

        transition_workflow:
            typical_flow: "NEW â†’ PLANNED â†’ IN_DEVELOPMENT â†’ FEATURE_IMPLEMENTED â†’ TEST_IMPLEMENTED â†’ READY"
            retirement_flow: "READY â†’ DEPRECATED â†’ ARCHIVED"
            skip_allowed: "Can skip statuses if appropriate (e.g., NEW â†’ IN_DEVELOPMENT for urgent fixes)"

        archive_safety_rules:
            code_deletion_criteria: "Only delete code for ARCHIVED features if not referenced by other non-ARCHIVED features"
            dependency_check: "Verify no active features depend on ARCHIVED feature code"
            documentation_retention: "Keep feature documentation even when ARCHIVED for historical reference"

    # PRIORITY 4: DDD Framework Compliance
    ddd_compliance:
        structure: "Follow DDD Procedures for merged FT-TC structure"
        guidelines_reference: "See procedures.yml/test-case-guidelines.yml for comprehensive guidance"
        template_compliance: "Follow template structure exactly while applying selection criteria"

template_content: |
    # FT-{{SECTION}} - {{Module Title}}

    <!-- Template Version: {{template_version}} -->

    ## FT-{{SECTION}}-001 - {{Feature Name}}
    - **Status:** {{NEW/PLANNED/IN_DEVELOPMENT/FEATURE_IMPLEMENTED/TEST_IMPLEMENTED/READY/DEPRECATED/ARCHIVED}}
    - **Description:** {{Brief feature description}}
    - **Criteria:** {{Acceptance criteria}}
    - **Dependencies:** {{Related features/requirements}}
    - **Impact:** {{High/Medium/Low}} - {{Impact description}}
    - **Code Location:** {{module.path}}[{{ImportedObject/Class}}] | {{file_path}} | {{N/A for documentation-only}}
    - **Test Coverage:** {{ANALYZE FIRST: Feature complexity (Simple/Moderate/Complex) â†’ Apply decision framework â†’ Select range}}
    - **Related Features:** [FT-{{RELATED_SECTION}}-{{NNN}}]({{related_file}}.md#ft-{{related_section}}-{{nnn}})
    - **Test Cases:** {{CRITICAL: Use decision framework from procedures.yml/test-case-guidelines.yml - Quality over quantity}}
        {{STEP 1: Analyze feature - Is this core functionality? Error-prone? User-impacting?}}
        {{STEP 2: Apply selection criteria - Always test: Core/Error/Integration/Security, Avoid: Getters/Framework/Obvious/Duplicate}}
        {{STEP 3: If rewriting existing file, COMPRESS and OPTIMIZE test cases - remove redundant/trivial tests}}
        {{STEP 4: Select test cases based on analysis, not arbitrary numbers}}
        - [{{status}}] **TC-{{SECTION}}-001** - {{Core Functionality Test - ALWAYS include}} ({{Auto/Manual}}, {{H/M/L}}) {{âœ…/ðŸš§/ðŸ“‹}}
        - [{{status}}] **TC-{{SECTION}}-002** - {{Error Condition Test - ALWAYS include}} ({{Auto/Manual}}, {{H/M/L}}) {{âœ…/ðŸš§/ðŸ“‹}}
        - [{{status}}] **TC-{{SECTION}}-003** - {{Additional test based on complexity analysis}} ({{Auto/Manual}}, {{H/M/L}}) {{âœ…/ðŸš§/ðŸ“‹}}
            - [{{status}}] **TC-{{SECTION}}-003a** - {{Sub-test: Same logic, different input - use sparingly}} - {{Boundary/Parameter variation}}
            - [{{status}}] **TC-{{SECTION}}-003b** - {{Sub-test: Same logic, different input - use sparingly}} - {{Boundary/Parameter variation}}

    ## FT-{{SECTION}}-002 - {{Feature Name}}
    - **Status:** {{NEW/PLANNED/IN_DEVELOPMENT/FEATURE_IMPLEMENTED/TEST_IMPLEMENTED/READY/DEPRECATED/ARCHIVED}}
    - **Description:** {{Brief feature description}}
    - **Criteria:** {{Acceptance criteria}}
    - **Dependencies:** {{Related features/requirements}}
    - **Impact:** {{High/Medium/Low}} - {{Impact description}}
    - **Code Location:** {{module.path}}[{{ImportedObject/Class}}] | {{file_path}} | {{N/A for documentation-only}}
    - **Test Coverage:** {{ANALYZE FIRST: Feature complexity (Simple/Moderate/Complex) â†’ Apply decision framework â†’ Select range}}
    - **Related Features:** [FT-{{SECTION}}-001]({{current_file}}.md#ft-{{section}}-001)
    - **Test Cases:** {{CRITICAL: Use decision framework from procedures.yml/test-case-guidelines.yml - Quality over quantity}}
        {{STEP 1: Analyze feature - Is this core functionality? Error-prone? User-impacting?}}
        {{STEP 2: Apply selection criteria - Always test: Core/Error/Integration/Security, Avoid: Getters/Framework/Obvious/Duplicate}}
        {{STEP 3: If rewriting existing file, PRESERVE existing TC-IDs and map to similar functionality}}
        {{STEP 4: Select test cases based on analysis, not arbitrary numbers}}
        - [{{status}}] **TC-{{SECTION}}-004** - {{Core Functionality Test - ALWAYS include}} ({{Auto/Manual}}, {{H/M/L}}) {{âœ…/ðŸš§/ðŸ“‹}}
        - [{{status}}] **TC-{{SECTION}}-005** - {{Error Condition Test - ALWAYS include}} ({{Auto/Manual}}, {{H/M/L}}) {{âœ…/ðŸš§/ðŸ“‹}}
            - [{{status}}] **TC-{{SECTION}}-005a** - {{Sub-test: Same logic, different input - use sparingly}} - {{Boundary/Parameter variation}}
            - [{{status}}] **TC-{{SECTION}}-005b** - {{Sub-test: Same logic, different input - use sparingly}} - {{Boundary/Parameter variation}}

examples:
    section_examples: "security.md â†’ FT-SEC-001, performance.md â†’ FT-PERF-001"
    replacements:
        SECTION: "SEC/PERF"
        status: "[x]/[~]/[ ]"
        complexity_guidance: "Simple(1-2), Moderate(2-4), Complex(3-6) test cases based on feature complexity"

    feature_status_examples:
        NEW: "FT-AUTH-003 - Multi-factor Authentication (just identified)"
        PLANNED: "FT-SEC-002 - Data Encryption (approved for Q2 development)"
        IN_DEVELOPMENT: "FT-API-001 - REST API Endpoints (code in progress)"
        FEATURE_IMPLEMENTED: "FT-UI-004 - Dashboard Widget (code complete, tests pending)"
        TEST_IMPLEMENTED: "FT-DB-001 - Database Migration (code and tests complete)"
        READY: "FT-CORE-001 - User Authentication (fully complete and deployed)"
        DEPRECATED: "FT-LEGACY-001 - Old Login System (replaced by FT-CORE-001)"
        ARCHIVED: "FT-BETA-001 - Beta Feature (removed, code deleted)"

    status_transition_examples:
        new_feature: "NEW â†’ PLANNED â†’ IN_DEVELOPMENT â†’ FEATURE_IMPLEMENTED â†’ TEST_IMPLEMENTED â†’ READY"
        urgent_fix: "NEW â†’ IN_DEVELOPMENT â†’ FEATURE_IMPLEMENTED â†’ TEST_IMPLEMENTED â†’ READY"
        feature_retirement: "READY â†’ DEPRECATED â†’ ARCHIVED"
        cancelled_feature: "PLANNED â†’ ARCHIVED"

    code_location_examples:
        python_class_method: "tools/drift_scanner.py#DriftScanner.analyze_code_locations"
        python_function: "tools/drift_scanner.py#analyze_drift"
        python_multiple: "tools/drift_scanner.py#DriftScanner._analyze_feature_implementation | passes.yml/10_reverse_pass.yml"
        typescript_file: "vscode-ddd-navigator/src/extension.ts"
        typescript_class: "vscode-ddd-navigator/src/providers/definitionProvider.ts#DddDefinitionProvider"
        shell_script: "tools/drift_scanner_mcp_server.sh"
        yaml_config: "passes.yml/3_development_pass.yml"
        yaml_multiple: "passes.yml/ | passes.yml/full_pass.yml"
        documentation_only: "N/A (Documentation standards and guidelines)"
        documentation_process: "N/A (Documentation framework quality process)"

critical_rules:
    code_location_rule: "Code Location = CODE BEING TESTED/DOCUMENTED, NOT TEST FILE LOCATION"

    correct_examples:
      - "tools/drift_scanner.py#DriftScanner.analyze_code_locations (Python class method being tested)"
      - "tools/drift_scanner_mcp_server.py#main (Python function being tested)"
      - "vscode-ddd-navigator/src/extension.ts (TypeScript file being tested)"
      - "passes.yml/3_development_pass.yml (YAML configuration being validated)"
      - "N/A (Documentation standards and guidelines) (Documentation-only feature)"

    wrong_examples:
      - "tests/test_drift_scanner.py (This is test file location)"
      - "tests/test_core_functionality.py (This is test file location)"
      - "spec/extension.spec.ts (This is test file location)"

code_location_discovery:
    when_unknown: "If the Code Location is not immediately known, use these steps to find it"

    steps:
        search_by_keywords:
          - "Use codebase search for key terms from feature description"
          - "Look for class names, function names, or module names mentioned"
          - "Search for related configuration keys or file patterns"

        analyze_description:
          - "Identify technical components mentioned in the feature"
          - "Look for file paths, class names, or module references"
          - "Check for imports or dependencies mentioned"

        use_codebase_retrieval: "Use codebase-retrieval tool with query like: 'Find code related to [feature functionality] including classes, functions, or modules that implement [specific capability]'"

        check_related_files:
          - "Look in logical directories (tools/, src/, lib/, etc.)"
          - "Check configuration files for related settings"
          - "Review existing test files for import statements (but don't use test paths as Code Location)"

        pattern_matching:
            drift_scanner_features: "Look in tools/drift_scanner.py, tools/drift_scanner_mcp_server.py"
            vscode_extension_features: "Look in vscode-ddd-navigator/src/ directory"
            pass_system_features: "Look in passes.yml/ directory for pass configurations"
            documentation_features: "Look in docs/ directory, templates/ directory"
            config_features: "Look in .agent3d-config.yml, pyproject.toml"
            shell_script_features: "Look in tools/ directory for .sh files"

        if_still_unknown:
          - "Use N/A (Feature description - code location to be determined)"
          - "Add TODO comment to find and update Code Location"
          - "Prioritize finding Code Location before implementing tests"

framework_classification:
    python_code: "tools/file.py#ClassName.method â†’ Automated testing"
    typescript_code: "vscode-ddd-navigator/src/file.ts#ClassName â†’ Automated testing"
    shell_scripts: "tools/script.sh â†’ Automated testing"
    yaml_config: "passes.yml/pass_name.yml â†’ Schema validation"
    documentation_only: "N/A (Description) â†’ Manual validation"
    mixed_implementation: "code_file.py#Class | config.yml â†’ Automated + Schema testing"

# PRIORITIZED TEST CASE SELECTION GUIDELINES
test_case_selection_framework:
    core_philosophy: "Quality over quantity - select test cases based on feature needs and risk"
    reference: "procedures.yml/test-case-guidelines.yml for comprehensive guidance"

    decision_framework:
        step_1: "Is this core functionality? â†’ YES: Create test case"
        step_2: "Does failure impact users significantly? â†’ YES: Create test case"
        step_3: "Is this complex or error-prone logic? â†’ YES: Create test case"
        step_4: "Is this already covered by other tests? â†’ YES: Skip test case"
        step_5: "Is this trivial or framework code? â†’ YES: Skip test case"

    selection_criteria:
        always_test:
          - "Core functionality (Primary feature behavior and main use cases)"
          - "Error conditions (Failure modes and edge cases)"
          - "Integration points (Interfaces with other components)"
          - "Security boundaries (Authentication, authorization, data validation)"

        consider_testing:
          - "Complex business logic (Multi-step workflows and complex decision trees)"
          - "Data transformations (Input/output processing and format conversions)"
          - "Performance critical paths (Bottlenecks and resource-intensive operations)"

        avoid_testing:
          - "Simple getters/setters (Trivial property access without logic)"
          - "Framework functionality (Well-tested third-party code)"
          - "Obvious implementations (Straightforward logic with no complexity)"
          - "Duplicate scenarios (Already covered by other tests)"

    complexity_analysis:
        simple_features: "1-2 test cases (Basic CRUD, Simple validations, Configuration loading)"
        moderate_features: "2-4 test cases (API endpoints, Data processing, User authentication)"
        complex_features: "3-6 test cases (Multi-step workflows, Integration systems, Advanced algorithms)"

# FEATURE STATUS MANAGEMENT FRAMEWORK
feature_status_management:
    purpose: "Comprehensive lifecycle tracking for features from conception to retirement"

    status_definitions:
        NEW:
            description: "Feature just identified/documented, awaiting planning"
            entry_criteria: "Feature documented with basic description"
            exit_criteria: "Feature approved and scheduled for development"
            typical_duration: "1-7 days"

        PLANNED:
            description: "Feature approved and scheduled for development"
            entry_criteria: "Feature approved, requirements defined, development scheduled"
            exit_criteria: "Development work begins"
            typical_duration: "1-30 days"

        IN_DEVELOPMENT:
            description: "Code implementation in progress"
            entry_criteria: "Developer assigned, work started"
            exit_criteria: "Code implementation complete"
            typical_duration: "1-14 days"

        FEATURE_IMPLEMENTED:
            description: "Code implementation complete, tests pending"
            entry_criteria: "Feature code complete and functional"
            exit_criteria: "Test cases implemented and passing"
            typical_duration: "1-5 days"

        TEST_IMPLEMENTED:
            description: "Test cases implemented and passing"
            entry_criteria: "All test cases implemented and passing"
            exit_criteria: "Feature ready for production use"
            typical_duration: "1-3 days"

        READY:
            description: "Feature fully complete and ready for production use"
            entry_criteria: "Code complete, tests passing, documentation updated"
            exit_criteria: "Feature deployed or marked for retirement"
            typical_duration: "Indefinite (active use)"

        DEPRECATED:
            description: "Feature marked for removal/replacement, still functional"
            entry_criteria: "Decision made to retire feature"
            exit_criteria: "Feature usage eliminated, ready for archival"
            typical_duration: "30-90 days"

        ARCHIVED:
            description: "Feature no longer active, code can be safely deleted"
            entry_criteria: "Feature no longer used, dependencies removed"
            exit_criteria: "N/A (terminal state)"
            code_deletion_allowed: true

    transition_rules:
        allowed_transitions:
            NEW: [ "PLANNED", "IN_DEVELOPMENT", "ARCHIVED" ]
            PLANNED: [ "IN_DEVELOPMENT", "ARCHIVED" ]
            IN_DEVELOPMENT: [ "FEATURE_IMPLEMENTED", "PLANNED", "ARCHIVED" ]
            FEATURE_IMPLEMENTED: [ "TEST_IMPLEMENTED", "IN_DEVELOPMENT" ]
            TEST_IMPLEMENTED: [ "READY", "FEATURE_IMPLEMENTED" ]
            READY: [ "DEPRECATED", "IN_DEVELOPMENT" ]
            DEPRECATED: [ "ARCHIVED", "READY" ]
            ARCHIVED: [] # Terminal state

        skip_transitions:
            emergency_development: "NEW â†’ IN_DEVELOPMENT (for urgent fixes)"
            cancelled_features: "Any status â†’ ARCHIVED (for cancelled features)"
            rollback_scenarios: "Any status â†’ previous status (for rollbacks)"

    archive_management:
        code_deletion_criteria:
          - "Feature status is ARCHIVED"
          - "No other non-ARCHIVED features depend on this feature's code"
          - "Code location analysis confirms safe deletion"
          - "Backup/version control retains code history"

        dependency_analysis:
            check_imports: "Scan codebase for imports/references to feature code"
            check_features: "Verify no active features list this as dependency"
            check_tests: "Ensure no active tests depend on this feature's code"

        deletion_process:
            step_1: "Verify feature is ARCHIVED status"
            step_2: "Run dependency analysis to confirm safe deletion"
            step_3: "Create backup/tag in version control"
            step_4: "Delete code files and associated tests"
            step_5: "Update documentation to reflect code deletion"
            step_6: "Update feature status with deletion timestamp"

# TC-ID PRESERVATION FOR REWRITE FORCE MODE
tc_id_preservation_framework:
    critical_requirement: "ALWAYS preserve existing TC-IDs when regenerating test cases in rewrite force mode"

    extraction_process:
        step_1: "Scan original file for all TC-#### patterns (main test cases)"
        step_2: "Scan original file for all TC-####-{a,b,c...} patterns (sub-test cases)"
        step_3: "Extract test case names and descriptions for mapping"
        step_4: "Create mapping table: TC-ID â†’ Functionality â†’ New Test Case"

    mapping_strategy:
        preserve_existing: "Map existing TC-IDs to functionally equivalent new test cases"
        functionality_match: "Match based on test purpose, not exact wording"
        maintain_sequence: "Keep TC-ID numbering sequence intact where possible"
        new_assignments: "Only assign new TC-IDs for genuinely new functionality"

    validation_requirements:
        traceability: "Ensure 1:1 mapping between old and new TC-IDs for same functionality"
        no_loss: "No existing TC-IDs should be lost unless functionality is removed"
        documentation: "Document any TC-ID changes with clear rationale"
        consistency: "Maintain consistent TC-ID patterns within the section"

    example_mapping:
        original: "TC-AUTH-001 - User Login Validation"
        preserved: "TC-AUTH-001 - Core Authentication Functionality (preserved from original)"
        rationale: "Same core functionality, TC-ID preserved for traceability"

test_guidelines:
    reference: "See procedures.yml/test-case-guidelines.yml for comprehensive test case selection and implementation guidance"
    key_principle: "Quality over quantity - select test cases based on feature complexity and risk"
    critical_process: "ALWAYS use decision framework and preserve TC-IDs in rewrite mode"

post_creation:
    steps:
      - "Apply test case selection framework and decision trees"
      - "If rewriting: Extract and preserve existing TC-IDs"
      - "Replace placeholders with analyzed values"
      - "Remove template tags"
      - "Validate TC-ID consistency and traceability"
      - "Update docs/FEATURES.md"
      - "Run drift scanner to verify TC-ID mapping"

validation:
    rules: [ "See Base Template System for universal validation rules" ]
    references: [ "BASE.template.yml#universal-validation-rules" ]

    test_case_validation:
      - "All test cases follow decision framework from procedures.yml/test-case-guidelines.yml"
      - "Test case selection based on feature complexity analysis, not arbitrary numbers"
      - "Core functionality and error conditions always tested"
      - "Trivial and framework functionality avoided"
      - "Sub-tests used only for same logic with different inputs"

    tc_id_validation:
      - "TC-ID optimization improves quality while maintaining coverage"
      - "Test case compression follows decision framework"
      - "Redundant and trivial test cases removed"
      - "TC-ID numbering sequence optimized for clarity"
      - "Compression decisions documented with rationale"

    feature_status_validation:
      - "Feature status is one of the defined valid statuses"
      - "Status transitions follow allowed transition rules"
      - "ARCHIVED features have dependency analysis completed"
      - "Status changes are documented with rationale"
      - "Code deletion only occurs for ARCHIVED features with no dependencies"
