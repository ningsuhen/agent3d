metadata:
  name: "Rewrite Files Procedure"
  version: "2.2.0"
  purpose: "Systematic loop workflow for large-scale file refactoring using DDD methodologies with intelligent version tracking"
  approach: "Pure LLM-based rewriting without programming language execution"
  scope: "Any file type - documentation, test files, configuration files, source code"
  created: "2025-01-29"
  last_updated: "2025-01-29"
  new_features: "Template version tracking, intelligent rewrite detection, --force flag support, memorization requirements for exec plan mode, zero confirmation fully automated execution"

description: |
  A comprehensive procedure for systematically rewriting files using DDD methodologies and templates.
  This procedure implements a backup-and-rewrite loop workflow that processes directories of files
  one at a time, ensuring quality improvements while maintaining safety through backups.

core_principles:
- "ONE FILE AT A TIME: Process only one file per iteration"
- "BACKUP BEFORE REWRITE: Always create backup before any changes"
- "VERIFY BEFORE CLEANUP: Compare content integrity before deleting backup"
- "PURE LLM APPROACH: No programming language execution, only text analysis"
- "ZERO CONFIRMATION: Never ask for human confirmation at any stage"
- "FULLY AUTOMATED: Complete autonomous execution without user interaction"
- "AUTOMATED VERIFICATION: No human confirmation required for any validation"
- "CONTENT PRESERVATION: Zero tolerance for information loss"
- "TEMP DIRECTORY USAGE: Store execution plans in ~/.agent3d-tmp/"
- "EXEC PLAN DRIVEN: Check exec plan for remaining iterations and status updates"
- "NO PROMPTING: Fully automated loop without user confirmation or prompts"
- "NO INTERRUPTIONS: Never pause for user input or confirmation"
- "VERSION TRACKING: Check template versions before rewriting to prevent unnecessary operations"
- "FORCE OVERRIDE: Support --force flag to bypass version checking when needed"
- "INTELLIGENT SKIPPING: Skip files that are already up-to-date unless forced"
- "MEMORIZATION REQUIRED: For exec plan mode, memorize necessary templates and procedures before execution"
- "OVERRIDE DDD CONFIRMATION: Override any DDD workflow confirmation requirements during rewrite operations"

workflow_pattern: "MEMORIZE → EXEC-PLAN → LOOP(VERSION-CHECK → BACKUP → REWRITE → VERIFY → CLEANUP)"

# Memorization Requirements for Exec Plan Mode
memorization_requirements:
  description: "Before creating execution plans, agents must memorize key templates and procedures to ensure consistent, high-quality rewriting"

  when_required:
  - "exec_plan_mode: true"
  - "target_scope involves feature documentation"
  - "target_scope involves test case documentation"
  - "target_scope involves template conversion"
  - "any rewrite operation requiring template compliance"

  critical_templates:
    feature_module_template:
      location: "templates/FEATURE-module.template.yml"
      purpose: "Feature documentation structure and test case integration"
      memorize_sections:
      - "template_content: Complete template structure with placeholders"
      - "examples: Code location examples and replacement patterns"
      - "critical_rules: Code location rules and correct/wrong examples"
      - "code_location_discovery: Steps for finding unknown code locations"
      - "framework_classification: Testing approach based on code type"
      - "test_guidelines: Reference to test case selection principles"
      critical_for: "Feature documentation rewriting, FT-TC structure compliance"

    test_case_guidelines:
      location: "procedures.yml/test-case-guidelines.yml"
      purpose: "Judicious test case selection and sub-test implementation"
      memorize_sections:
      - "philosophy: Quality over quantity principle"
      - "selection_criteria: Always test, consider testing, avoid testing"
      - "feature_complexity: Simple(1-2), Moderate(2-4), Complex(3-6) ranges"
      - "sub_test_guidelines: When to use/not use sub-tests"
      - "decision_framework: Test case and sub-test decision trees"
      - "implementation_examples: Good vs poor sub-test usage patterns"
      - "tc_identifier_placement: Allowed and forbidden locations"
      critical_for: "Test case selection, sub-test implementation, TC ID mapping"

    templates_procedure:
      location: "procedures.yml/templates.yml"
      purpose: "Template usage workflow and validation standards"
      memorize_sections:
      - "template_usage: Process steps and placeholder replacement rules"
      - "ddd_workflow: SCAN → DRAFT → ASK → SYNC workflow (SKIP CONFIRM step for rewrite operations)"
      - "format_requirements: YAML-only requirements for DDD-STATUS and EXEC-PLAN"
      - "validation_checklist: Structure and drift validation requirements"
      - "best_practices: Template handling and format consistency"
      critical_for: "Template compliance, workflow execution, format standards"
      rewrite_override: "Override DDD workflow confirmation requirements - proceed directly to execution"

  supporting_templates:
    exec_plan_template:
      location: "templates/EXEC-PLAN.template.yml"
      purpose: "Execution plan structure and progress tracking"
      memorize_sections: [ "metadata structure", "checkpoint format", "validation criteria" ]
      when_needed: "Creating execution plans for any rewrite operation"

    ddd_status_template:
      location: "templates/DDD-STATUS.template.yml"
      purpose: "DDD status tracking and pass execution"
      memorize_sections: [ "status format", "pass tracking", "completion criteria" ]
      when_needed: "DDD pass execution and status updates"

    base_template:
      location: "templates/BASE.template.yml"
      purpose: "Universal validation rules and template standards"
      memorize_sections: [ "universal validation rules", "template compliance standards" ]
      when_needed: "All template-based rewriting operations"

  memorization_process:
    step_1:
      action: "Identify target scope and determine required templates"
      validation: "Check target_scope against memorization_requirements.when_required"

    step_2:
      action: "Load and memorize critical templates based on scope"
      method: "Use view tool to read complete template files"
      focus: "Pay special attention to memorize_sections for each template"

    step_3:
      action: "Load and memorize supporting procedures"
      method: "Use view tool to read complete procedure files"
      focus: "Understand workflow patterns, validation rules, and best practices"

    step_4:
      action: "Verify memorization completeness"
      validation: "Confirm understanding of template structures, rules, and workflows"

    step_5:
      action: "Proceed with execution plan creation"
      prerequisite: "All required templates and procedures memorized"

  quality_assurance:
    memorization_validation:
    - "Can recite template structure without referring to files"
    - "Understands placeholder replacement patterns"
    - "Knows validation rules and quality standards"
    - "Familiar with workflow patterns and best practices"

    execution_validation:
    - "Rewritten files comply with memorized template structures"
    - "Test case selection follows memorized guidelines"
    - "Code location discovery uses memorized procedures"
    - "Format requirements match memorized standards"

  benefits:
    consistency: "All rewritten files follow same high-quality standards"
    efficiency: "No need to repeatedly reference template files during execution"
    quality: "Deep understanding of templates leads to better rewriting"
    compliance: "Ensures adherence to DDD framework requirements"

execution_strategy:
  approach: "execution_plan_driven"
  speed_optimization: "pre_computed_file_list_and_templates"
  description: "Memorize templates, create execution plan once, then execute fast loop per file"

  optimized_workflow:
    phase_0: "MEMORIZE-TEMPLATES-AND-PROCEDURES (load critical templates and procedures into memory)"
    phase_1: "CREATE-EXEC-PLAN (scan all files, cache templates, generate roadmap)"
    phase_2: "FAST-LOOP per file: BACKUP → REWRITE → VERIFY → CLEANUP"
    benefits: "Eliminates redundant scanning, template loading, and planning per file; ensures consistent quality through memorized standards"

# Target Scope Configuration (Examples)
target_scope_examples:
  documentation_files:
    patterns: [ "docs/**/*.md", "*.md", "README.md" ]
    description: "Markdown documentation files"
    common_templates: [ "feature_template", "readme_template", "documentation_template" ]

  test_files:
    patterns: [ "tests/**/*.py", "test/**/*.js", "spec/**/*.ts" ]
    description: "Test files in various languages"
    common_templates: [ "test_template", "pytest_template", "jest_template" ]

  configuration_files:
    patterns: [ "**/*.yml", "**/*.yaml", "**/*.json", "*.toml" ]
    description: "Configuration files"
    common_templates: [ "config_template", "yaml_template", "json_template" ]

  source_code:
    patterns: [ "src/**/*.py", "lib/**/*.js", "src/**/*.java", "tools/**/*.py" ]
    description: "Source code files"
    common_templates: [ "class_template", "module_template", "function_template" ]

  pass_documentation:
    patterns: [ "passes.yml/*.yml", "procedures.yml/*.yml" ]
    description: "DDD pass and procedure documentation"
    common_templates: [ "pass_template", "procedure_template" ]

  template_conversion:
    patterns: [ "templates/*.template.md" ]
    description: "Convert markdown templates to YAML format"
    output_pattern: "templates/*.template.yml"
    conversion_type: "markdown_to_yaml_with_preserved_content"
    common_templates: [ "yaml_template_structure" ]

# Execution Plan Workflow
execution_phases:
  memorize_templates_and_procedures:
    purpose: "Load critical templates and procedures into memory before execution"
    description: "Prerequisite phase: memorize templates and procedures required for target scope"
    prerequisite: "Determine target scope and identify required memorization items"

    process:
      step_1: "Analyze target scope against memorization_requirements.when_required"
      step_2: "Load critical templates based on scope (feature_module_template, test_case_guidelines, templates_procedure)"
      step_3: "Load supporting templates as needed (exec_plan_template, ddd_status_template, base_template)"
      step_4: "Verify memorization completeness before proceeding"

    validation:
    - "All required templates memorized completely"
    - "Template structures and rules understood"
    - "Workflow patterns and best practices internalized"
    - "Ready to proceed with execution plan creation"

  create_exec_plan:
    purpose: "Create comprehensive execution plan for all target files"
    description: "One-time setup: scan directory, identify files, determine templates, create execution roadmap"
    prerequisite: "memorize_templates_and_procedures phase completed successfully"

    exec_plan_format: "YAML"
    exec_plan_location: "~/.agent3d-tmp/"
    exec_plan_filename: "REWRITE-PLAN-{target_scope}-{timestamp}.yml"
    exec_plan_full_path: "~/.agent3d-tmp/REWRITE-PLAN-{target_scope}-{timestamp}.yml"

    rewrite_plan_template: |
      # File Rewrite Plan
      # Location: ~/.agent3d-tmp/REWRITE-PLAN-{target_scope}-{timestamp}.yml
      metadata:
        operation: "file_rewrite"
        target_pattern: "{target_pattern}"
        total_files: {file_count}
        estimated_duration: "{estimated_time}"
        created: "{timestamp}"
        plan_location: "~/.agent3d-tmp/"

      files_to_process:
        - path: "{file_path_1}"
          template: "{template_name}"
          template_version: "{template_version}"
          current_file_version: "{current_version_or_none}"
          backup: "{file_path_1}.backup.{timestamp}"
          priority: "{priority_level}"
          status: "pending"
          version_check_result: "pending"
          skip_reason: null

        - path: "{file_path_2}"
          template: "{template_name}"
          template_version: "{template_version}"
          current_file_version: "{current_version_or_none}"
          backup: "{file_path_2}.backup.{timestamp}"
          priority: "{priority_level}"
          status: "pending"
          version_check_result: "pending"
          skip_reason: null

      templates_cache:
        "{template_name_1}": "{cached_template_content_1}"
        "{template_name_2}": "{cached_template_content_2}"

      progress:
        completed: 0
        remaining: {file_count}
        current_iteration: 0
        next_iteration: 1
        current_file: null
        errors: []

      execution_control:
        auto_continue: true
        no_prompting: true
        no_confirmation: true
        fully_automated: true
        never_ask_user: true
        override_ddd_confirmation: true
        check_remaining_iterations: true
        resume_from_iteration: null
        max_iterations: {file_count}
        force_rewrite: false  # Set to true to bypass version checking
        version_tracking_enabled: true
        skip_up_to_date_files: true
        autonomous_execution: true
        zero_user_interaction: true

    speed_optimizations:
    - "scan_once_execute_many"
    - "pre_cache_all_templates"
    - "pre_calculate_all_backup_paths"
    - "batch_file_validation"

  # Fast Loop Phases (per file from exec plan)
  version_check:
    purpose: "Intelligent rewrite detection to prevent unnecessary operations"
    action: "compare_template_version_with_file_version"

    version_detection:
      template_version: "Extract version from template metadata.version field"
      file_version: "Search for <!-- Template Version: X.X.X --> comment in target file"
      fallback: "If no version comment found, assume file needs rewriting"

    comparison_logic:
      template_newer: "template.version > file.version → PROCEED with rewrite"
      template_same: "template.version == file.version → SKIP rewrite (unless --force)"
      template_older: "template.version < file.version → SKIP rewrite (unless --force)"
      no_file_version: "file has no version comment → PROCEED with rewrite"

    force_flag_behavior:
      when_force_enabled: "Skip all version checking and always proceed with rewrite"
      when_force_disabled: "Follow comparison_logic above"

    skip_conditions:
    - "template_version <= file_version AND --force not used"
    - "file is already up-to-date with current template"

    proceed_conditions:
    - "template_version > file_version"
    - "--force flag is used"
    - "file has no version tracking comment"
    - "file does not exist"

    output_actions:
      skip: "Log skip reason and move to next file in exec plan"
      proceed: "Continue to backup phase"

  backup:
    action: "mv {file_path} {file_path}.backup.{timestamp}"
    verify: "backup_file_exists_and_readable"
    safety: "never_overwrite_existing_backups"
    prerequisite: "version_check passed or --force flag used"

  rewrite:
    action: "apply_cached_template_to_original_content_or_convert_format"
    approach: "pure_llm_analysis_and_generation"
    preserve: "all_factual_information_technical_details_references"
    improve: "structure_clarity_template_compliance"

    template_compliance: "follow_cached_template_format_exactly"

    version_tracking_requirements:
      template_version_injection: "ALWAYS include <!-- Template Version: {template.version} --> comment in generated files"
      placement: "Insert version comment near the top of the file, after title/header"
      format: "<!-- Template Version: X.X.X -->"
      critical: "Version tracking is MANDATORY for all generated files"

    # TC-ID Preservation for Feature Documentation
    tc_id_preservation_requirements:
      when_applicable: "Feature documentation files containing TC-#### identifiers"
      critical_rule: "ALWAYS preserve existing TC-IDs when regenerating test cases in force mode"

      extraction_phase:
        step_1: "Scan backup file for all TC-#### patterns (main test cases)"
        step_2: "Scan backup file for all TC-####-{a,b,c...} patterns (sub-test cases)"
        step_3: "Extract test case names, descriptions, and functionality"
        step_4: "Create TC-ID mapping table: Original TC-ID → Functionality → Status"

      mapping_phase:
        preserve_rule: "Map existing TC-IDs to functionally equivalent new test cases"
        functionality_match: "Match based on test purpose and core functionality, not exact wording"
        sequence_maintenance: "Keep TC-ID numbering sequence intact where possible"
        new_assignment_rule: "Only assign new TC-IDs for genuinely new functionality not covered by existing tests"

      regeneration_phase:
        apply_guidelines: "Use memorized test case selection guidelines for new test case generation"
        preserve_mapping: "Apply TC-ID mapping to maintain traceability"
        quality_focus: "Follow quality-over-quantity principle while preserving existing TC-IDs"
        validation: "Ensure 1:1 mapping between old and new TC-IDs for same functionality"

      validation_requirements:
        traceability_check: "Verify all original TC-IDs are accounted for (preserved or documented as removed)"
        functionality_match: "Confirm preserved TC-IDs map to equivalent functionality"
        sequence_consistency: "Validate TC-ID numbering remains consistent within section"
        no_loss_rule: "No existing TC-IDs lost unless functionality is genuinely removed"

    # Special handling for template conversion
    template_conversion_rules:
      when: "target_scope is template_conversion"
      conversion_type: "markdown_to_yaml_with_preserved_content"

      preserve_exactly:
      - "All content within <template> tags in original markdown format"
      - "All placeholder syntax: {{variable_name}}"
      - "Original template structure and formatting"
      - "Example content and demonstrations"

      convert_to_yaml:
      - "**USAGE:** sections → yaml usage field"
      - "**EXAMPLE VALUES:** → yaml examples field"
      - "**VALIDATION:** → yaml validation field"
      - "**CRITICAL RULES:** → yaml critical_rules field"
      - "Descriptive text → yaml description field"
      - "**PURPOSE:** → yaml metadata.purpose field"

      yaml_structure_target: |
        metadata:
          name: "{template_name}"
          type: "template"
          format: "markdown_content_with_yaml_metadata"
          purpose: "{extracted_purpose}"

        usage:
          description: "{extracted_usage_instructions}"
          when_to_use: "{extracted_scenarios}"

        template_content: |
          {original_template_content_preserved_exactly}

        examples:
          {extracted_example_values_as_yaml}

        validation:
          rules: ["{extracted_validation_rules}"]

        critical_rules:
          - "{extracted_critical_rules}"

  validate:
    check: "template_compliance_syntax_correctness_required_sections"
    pass_criteria: "all_validation_checks_successful"

    # TC-ID Preservation Validation
    tc_id_preservation_validation:
      when: "feature documentation files with TC-#### identifiers"
      critical_checks:
      - "all_original_tc_ids_accounted_for"
      - "preserved_tc_ids_map_to_equivalent_functionality"
      - "tc_id_numbering_sequence_consistent"
      - "no_tc_id_loss_without_documented_rationale"
      - "test_case_selection_follows_memorized_guidelines"
      - "quality_over_quantity_principle_applied"

      validation_process:
        step_1: "Compare original TC-IDs from backup with new file TC-IDs"
        step_2: "Verify functionality mapping for preserved TC-IDs"
        step_3: "Validate new TC-IDs only assigned for new functionality"
        step_4: "Check test case selection follows decision framework"
        step_5: "Confirm no arbitrary test case quantity targets"

    # Special validation for template conversion
    template_conversion_validation:
      when: "target_scope is template_conversion"
      additional_checks:
      - "yaml_syntax_validity"
      - "template_content_preservation_in_template_content_field"
      - "all_placeholders_preserved_correctly"
      - "instruction_sections_converted_to_yaml_fields"
      - "no_template_content_loss"

  compare:
    action: "verify_all_original_content_preserved_in_rewritten_file"
    approach: "pure_llm_semantic_comparison"
    critical: "zero_tolerance_for_information_loss"

  cleanup:
    action: "remove_backup_and_original_if_different_names"
    prerequisite: "content_integrity_verification_passed"
    safety: "double_check_before_deletion"

    cleanup_logic:
      same_filename:
        condition: "input_path == output_path"
        action: "rm {backup_path}"
        description: "Remove backup only - original file was overwritten"

      different_filename:
        condition: "input_path != output_path (e.g., .md → .yml conversion)"
        actions:
        - "rm {backup_path}"
        - "rm {input_path} (if still exists)"
        description: "Remove both backup and original file - new file created with different name"

    file_name_scenarios:
      template_conversion: "templates/FILE.template.md → templates/FILE.template.yml"
      regular_rewrite: "docs/features/core.md → docs/features/core.md (same file)"

    safety_checks:
    - "verify_new_file_exists_and_valid"
    - "verify_content_integrity_passed"
    - "confirm_backup_and_original_different_from_new_file"

# DDD Workflow Override for Rewrite Operations
ddd_workflow_override:
  critical_rule: "Rewrite operations NEVER require confirmation - override all DDD workflow confirmation steps"

  standard_ddd_workflow: "SCAN → DRAFT → ASK → SYNC → CONFIRM BEFORE COMMIT"
  rewrite_workflow_override: "SCAN → DRAFT → SYNC → EXECUTE (SKIP ASK and CONFIRM steps)"

  confirmation_overrides:
  - "Skip 'ASK' step - no user questions during rewrite operations"
  - "Skip 'CONFIRM BEFORE COMMIT' step - proceed directly to execution"
  - "Override any template-based confirmation requirements"
  - "Bypass any procedural confirmation checkpoints"
  - "Never pause for user input or approval"

  rationale: "Rewrite operations are designed to be fully automated with built-in safety through backup and validation"
  safety_measures: "Safety ensured through backup creation, content verification, and automated validation - no human confirmation needed"

# Loop Control
loop_control:
  exec_plan_driven: true
  no_prompting: true
  no_confirmation: true
  fully_automated: true
  zero_user_interaction: true

  continuation_criteria:
  - "check_exec_plan_for_remaining_iterations"
  - "next_iteration_exists_in_exec_plan"
  - "no_critical_errors_encountered"
  - "auto_continue_enabled_in_exec_plan"
  - "never_wait_for_user_confirmation"

  termination_criteria:
  - "all_files_in_exec_plan_processed_successfully"
  - "no_more_iterations_in_exec_plan"
  - "critical_error_encountered"
  - "maximum_iteration_limit_reached"

  exec_plan_management:
  - "update_current_iteration_in_exec_plan"
  - "update_next_iteration_in_exec_plan"
  - "update_file_status_to_completed_or_skipped"
  - "update_version_check_result_in_exec_plan"
  - "log_skip_reason_if_applicable"
  - "increment_completed_count"
  - "decrement_remaining_count"
  - "log_errors_to_exec_plan"

  progress_tracking:
  - "files_processed_count_from_exec_plan"
  - "files_remaining_count_from_exec_plan"
  - "current_iteration_from_exec_plan"
  - "next_iteration_from_exec_plan"
  - "overall_quality_improvement"
  - "time_per_file_average"

  resumption_support:
  - "can_resume_from_any_iteration"
  - "exec_plan_tracks_completion_status"
  - "failed_iterations_can_be_retried"
  - "progress_persisted_in_exec_plan_file"

# Safety and Recovery
safety_measures:
  backup_management:
  - "never_overwrite_existing_backups"
  - "maintain_backup_registry"
  - "verify_backup_integrity"
  - "provide_easy_restoration_process"

  error_handling:
  - "graceful_failure_recovery"
  - "automatic_backup_restoration"
  - "detailed_error_logging"
  - "automated_issue_resolution"
  - "no_user_intervention_required"

  quality_assurance:
  - "mandatory_content_integrity_verification"
  - "automated_content_preservation_checking"
  - "quality_threshold_enforcement"
  - "template_compliance_validation"
  - "no_backup_deletion_without_verification"
  - "automated_validation_sufficient_for_safety"
  - "no_human_confirmation_needed_due_to_built_in_safety"

# Expected Outcomes
expected_outcomes:
  immediate:
  - "systematically_improved_file_quality"
  - "ddd_template_compliance_achieved"
  - "enhanced_content_clarity_and_structure"
  - "maintained_content_accuracy_and_integrity"
  - "intelligent_rewrite_detection_prevents_unnecessary_operations"
  - "version_tracking_enables_efficient_template_management"

  long_term:
  - "consistent_documentation_standards"
  - "improved_maintainability"
  - "enhanced_user_experience"
  - "reduced_technical_debt"
  - "efficient_template_evolution_and_migration"
  - "automated_version_compatibility_management"

# Quality Gates
quality_gates:
  per_file:
  - name: "template_compliance"
    threshold: "100%"
    critical: true
  - name: "content_completeness"
    threshold: "95%"
    critical: true
  - name: "quality_improvement"
    threshold: "20%"
    critical: false
  - name: "version_tracking_injection"
    threshold: "100%"
    critical: true
    description: "All generated files must include template version comment"
  - name: "tc_id_preservation_accuracy"
    threshold: "100%"
    critical: true
    description: "All existing TC-IDs preserved or documented when rewriting feature files"
  - name: "test_case_selection_quality"
    threshold: "95%"
    critical: true
    description: "Test case selection follows decision framework and guidelines"
  - name: "zero_confirmation_compliance"
    threshold: "100%"
    critical: true
    description: "No confirmation prompts or user interaction during rewrite operations"

  overall_procedure:
  - name: "files_processed_successfully"
    threshold: "90%"
    critical: true
  - name: "average_quality_improvement"
    threshold: "25%"
    critical: false
  - name: "zero_data_loss"
    threshold: "100%"
    critical: true
  - name: "version_tracking_accuracy"
    threshold: "100%"
    critical: true
    description: "All version checks and injections must be accurate"
  - name: "intelligent_skip_efficiency"
    threshold: "80%"
    critical: false
    description: "Percentage of unnecessary rewrites prevented by version checking"

  template_conversion_specific:
  - name: "yaml_syntax_validity"
    threshold: "100%"
    critical: true
  - name: "template_content_preservation"
    threshold: "100%"
    critical: true
  - name: "instruction_conversion_completeness"
    threshold: "95%"
    critical: true

# Template Conversion Example
template_conversion_example:
  input_markdown_template: |
    # Feature Template

    **PURPOSE:** Template for feature documentation

    **USAGE:**
    - Use this template for creating new features
    - Fill in all placeholder values

    <template>
    ## {{ft_id}} - {{feature_name}}
    - **Description:** {{description}}
    - **Status:** {{status}}
    </template>

    **EXAMPLE VALUES:**
    - {{ft_id}}: FT-CORE-001
    - {{feature_name}}: Core Feature

    **VALIDATION:** Check all fields completed

  output_yaml_template: |
    metadata:
      name: "Feature Template"
      type: "template"
      format: "markdown_content_with_yaml_metadata"
      purpose: "Template for feature documentation"

    usage:
      description: "Use this template for creating new features"
      instructions:
        - "Fill in all placeholder values"

    template_content: |
      ## {{ft_id}} - {{feature_name}}
      - **Description:** {{description}}
      - **Status:** {{status}}

    examples:
      ft_id: "FT-CORE-001"
      feature_name: "Core Feature"
      description: "Brief description of the feature"
      status: "complete/pending/in-progress"

    validation:
      rules: ["Check all fields completed"]
